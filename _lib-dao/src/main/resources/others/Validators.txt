@Autowired
private AddressValidator addressValidator;
Optional<Address> optionalAddress = addressValidator.validate(requestDto.getId());


@Autowired
private AvailableBalanceRefundRequestValidator availableBalanceRefundRequestValidator;
Optional<AvailableBalanceRefundRequest> optionalAvailableBalanceRefundRequest = availableBalanceRefundRequestValidator.validate(requestDto.getId());


@Autowired
private AvailableBalanceRefundRequestDocumentValidator availableBalanceRefundRequestDocumentValidator;
Optional<AvailableBalanceRefundRequestDocument> optionalAvailableBalanceRefundRequestDocument = availableBalanceRefundRequestDocumentValidator.validate(requestDto.getId());


@Autowired
private AvailableBalanceRefundRequestHoldHistoryValidator availableBalanceRefundRequestHoldHistoryValidator;
Optional<AvailableBalanceRefundRequestHoldHistory> optionalAvailableBalanceRefundRequestHoldHistory = availableBalanceRefundRequestHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private AvailableBalanceRefundRequestStatusHistoryValidator availableBalanceRefundRequestStatusHistoryValidator;
Optional<AvailableBalanceRefundRequestStatusHistory> optionalAvailableBalanceRefundRequestStatusHistory = availableBalanceRefundRequestStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramValidator awarenessProgramValidator;
Optional<AwarenessProgram> optionalAwarenessProgram = awarenessProgramValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramDocumentValidator awarenessProgramDocumentValidator;
Optional<AwarenessProgramDocument> optionalAwarenessProgramDocument = awarenessProgramDocumentValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramEmployerAttendeeValidator awarenessProgramEmployerAttendeeValidator;
Optional<AwarenessProgramEmployerAttendee> optionalAwarenessProgramEmployerAttendee = awarenessProgramEmployerAttendeeValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramEmployerDocumentValidator awarenessProgramEmployerDocumentValidator;
Optional<AwarenessProgramEmployerDocument> optionalAwarenessProgramEmployerDocument = awarenessProgramEmployerDocumentValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramEmployerParticipantValidator awarenessProgramEmployerParticipantValidator;
Optional<AwarenessProgramEmployerParticipant> optionalAwarenessProgramEmployerParticipant = awarenessProgramEmployerParticipantValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramHistoryValidator awarenessProgramHistoryValidator;
Optional<AwarenessProgramHistory> optionalAwarenessProgramHistory = awarenessProgramHistoryValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramMemberAttendeeValidator awarenessProgramMemberAttendeeValidator;
Optional<AwarenessProgramMemberAttendee> optionalAwarenessProgramMemberAttendee = awarenessProgramMemberAttendeeValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramMemberDocumentValidator awarenessProgramMemberDocumentValidator;
Optional<AwarenessProgramMemberDocument> optionalAwarenessProgramMemberDocument = awarenessProgramMemberDocumentValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramOrganizationValidator awarenessProgramOrganizationValidator;
Optional<AwarenessProgramOrganization> optionalAwarenessProgramOrganization = awarenessProgramOrganizationValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramOrganizationHistoryValidator awarenessProgramOrganizationHistoryValidator;
Optional<AwarenessProgramOrganizationHistory> optionalAwarenessProgramOrganizationHistory = awarenessProgramOrganizationHistoryValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramPortalUserValidator awarenessProgramPortalUserValidator;
Optional<AwarenessProgramPortalUser> optionalAwarenessProgramPortalUser = awarenessProgramPortalUserValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramSelfEmploymentAttendeeValidator awarenessProgramSelfEmploymentAttendeeValidator;
Optional<AwarenessProgramSelfEmploymentAttendee> optionalAwarenessProgramSelfEmploymentAttendee = awarenessProgramSelfEmploymentAttendeeValidator.validate(requestDto.getId());


@Autowired
private AwarenessProgramStatusHistoryValidator awarenessProgramStatusHistoryValidator;
Optional<AwarenessProgramStatusHistory> optionalAwarenessProgramStatusHistory = awarenessProgramStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private BankBatchDepositValidator bankBatchDepositValidator;
Optional<BankBatchDeposit> optionalBankBatchDeposit = bankBatchDepositValidator.validate(requestDto.getId());


@Autowired
private BankBatchDepositAllocationValidator bankBatchDepositAllocationValidator;
Optional<BankBatchDepositAllocation> optionalBankBatchDepositAllocation = bankBatchDepositAllocationValidator.validate(requestDto.getId());


@Autowired
private BankBatchDepositEtfbBranchValidator bankBatchDepositEtfbBranchValidator;
Optional<BankBatchDepositEtfbBranch> optionalBankBatchDepositEtfbBranch = bankBatchDepositEtfbBranchValidator.validate(requestDto.getId());


@Autowired
private BankBatchDepositPaymentTypeHistoryValidator bankBatchDepositPaymentTypeHistoryValidator;
Optional<BankBatchDepositPaymentTypeHistory> optionalBankBatchDepositPaymentTypeHistory = bankBatchDepositPaymentTypeHistoryValidator.validate(requestDto.getId());


@Autowired
private BankBatchDepositStatusHistoryValidator bankBatchDepositStatusHistoryValidator;
Optional<BankBatchDepositStatusHistory> optionalBankBatchDepositStatusHistory = bankBatchDepositStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private BankStatementValidator bankStatementValidator;
Optional<BankStatement> optionalBankStatement = bankStatementValidator.validate(requestDto.getId());


@Autowired
private BankStatementDocumentValidator bankStatementDocumentValidator;
Optional<BankStatementDocument> optionalBankStatementDocument = bankStatementDocumentValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnValidator bankStatementTxnValidator;
Optional<BankStatementTxn> optionalBankStatementTxn = bankStatementTxnValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnBatchDepositValidator bankStatementTxnBatchDepositValidator;
Optional<BankStatementTxnBatchDeposit> optionalBankStatementTxnBatchDeposit = bankStatementTxnBatchDepositValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnCollectionValidator bankStatementTxnCollectionValidator;
Optional<BankStatementTxnCollection> optionalBankStatementTxnCollection = bankStatementTxnCollectionValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnOnlinePaymentValidator bankStatementTxnOnlinePaymentValidator;
Optional<BankStatementTxnOnlinePayment> optionalBankStatementTxnOnlinePayment = bankStatementTxnOnlinePaymentValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnOtherDepositValidator bankStatementTxnOtherDepositValidator;
Optional<BankStatementTxnOtherDeposit> optionalBankStatementTxnOtherDeposit = bankStatementTxnOtherDepositValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnOtherWithdrawalValidator bankStatementTxnOtherWithdrawalValidator;
Optional<BankStatementTxnOtherWithdrawal> optionalBankStatementTxnOtherWithdrawal = bankStatementTxnOtherWithdrawalValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnPaymentCollectionAgentValidator bankStatementTxnPaymentCollectionAgentValidator;
Optional<BankStatementTxnPaymentCollectionAgent> optionalBankStatementTxnPaymentCollectionAgent = bankStatementTxnPaymentCollectionAgentValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnPaymentDepositValidator bankStatementTxnPaymentDepositValidator;
Optional<BankStatementTxnPaymentDeposit> optionalBankStatementTxnPaymentDeposit = bankStatementTxnPaymentDepositValidator.validate(requestDto.getId());


@Autowired
private BankStatementTxnPaymentReturnValidator bankStatementTxnPaymentReturnValidator;
Optional<BankStatementTxnPaymentReturn> optionalBankStatementTxnPaymentReturn = bankStatementTxnPaymentReturnValidator.validate(requestDto.getId());


@Autowired
private CashierCollectionSummaryValidator cashierCollectionSummaryValidator;
Optional<CashierCollectionSummary> optionalCashierCollectionSummary = cashierCollectionSummaryValidator.validate(requestDto.getId());


@Autowired
private CashierCollectionSummaryPaymentValidator cashierCollectionSummaryPaymentValidator;
Optional<CashierCollectionSummaryPayment> optionalCashierCollectionSummaryPayment = cashierCollectionSummaryPaymentValidator.validate(requestDto.getId());


@Autowired
private ClaimValidator claimValidator;
Optional<Claim> optionalClaim = claimValidator.validate(requestDto.getId());


@Autowired
private ClaimAmicAmsPartPaymentValidator claimAmicAmsPartPaymentValidator;
Optional<ClaimAmicAmsPartPayment> optionalClaimAmicAmsPartPayment = claimAmicAmsPartPaymentValidator.validate(requestDto.getId());


@Autowired
private ClaimDeathValidator claimDeathValidator;
Optional<ClaimDeath> optionalClaimDeath = claimDeathValidator.validate(requestDto.getId());


@Autowired
private ClaimDocumentValidator claimDocumentValidator;
Optional<ClaimDocument> optionalClaimDocument = claimDocumentValidator.validate(requestDto.getId());


@Autowired
private ClaimGeneralValidator claimGeneralValidator;
Optional<ClaimGeneral> optionalClaimGeneral = claimGeneralValidator.validate(requestDto.getId());


@Autowired
private ClaimJoinValidator claimJoinValidator;
Optional<ClaimJoin> optionalClaimJoin = claimJoinValidator.validate(requestDto.getId());


@Autowired
private ClaimMemberAccountValidator claimMemberAccountValidator;
Optional<ClaimMemberAccount> optionalClaimMemberAccount = claimMemberAccountValidator.validate(requestDto.getId());


@Autowired
private ClaimMemberAccountAllocationPartPaymentValidator claimMemberAccountAllocationPartPaymentValidator;
Optional<ClaimMemberAccountAllocationPartPayment> optionalClaimMemberAccountAllocationPartPayment = claimMemberAccountAllocationPartPaymentValidator.validate(requestDto.getId());


@Autowired
private ClaimPaymentValidator claimPaymentValidator;
Optional<ClaimPayment> optionalClaimPayment = claimPaymentValidator.validate(requestDto.getId());


@Autowired
private ClaimPaymentReceiverValidator claimPaymentReceiverValidator;
Optional<ClaimPaymentReceiver> optionalClaimPaymentReceiver = claimPaymentReceiverValidator.validate(requestDto.getId());


@Autowired
private ClaimRmicAmsPartPaymentValidator claimRmicAmsPartPaymentValidator;
Optional<ClaimRmicAmsPartPayment> optionalClaimRmicAmsPartPayment = claimRmicAmsPartPaymentValidator.validate(requestDto.getId());


@Autowired
private CollectionValidator collectionValidator;
Optional<Collection> optionalCollection = collectionValidator.validate(requestDto.getId());


@Autowired
private CollectionAddEmployerMemberValidator collectionAddEmployerMemberValidator;
Optional<CollectionAddEmployerMember> optionalCollectionAddEmployerMember = collectionAddEmployerMemberValidator.validate(requestDto.getId());


@Autowired
private CollectionAddSelfMemberValidator collectionAddSelfMemberValidator;
Optional<CollectionAddSelfMember> optionalCollectionAddSelfMember = collectionAddSelfMemberValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentValidator collectionAmendmentValidator;
Optional<CollectionAmendment> optionalCollectionAmendment = collectionAmendmentValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentAvailableBalanceCreditValidator collectionAmendmentAvailableBalanceCreditValidator;
Optional<CollectionAmendmentAvailableBalanceCredit> optionalCollectionAmendmentAvailableBalanceCredit = collectionAmendmentAvailableBalanceCreditValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentAvailableBalanceCreditItemValidator collectionAmendmentAvailableBalanceCreditItemValidator;
Optional<CollectionAmendmentAvailableBalanceCreditItem> optionalCollectionAmendmentAvailableBalanceCreditItem = collectionAmendmentAvailableBalanceCreditItemValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentAvailableBalanceDebitValidator collectionAmendmentAvailableBalanceDebitValidator;
Optional<CollectionAmendmentAvailableBalanceDebit> optionalCollectionAmendmentAvailableBalanceDebit = collectionAmendmentAvailableBalanceDebitValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentAvailableBalanceDebitItemValidator collectionAmendmentAvailableBalanceDebitItemValidator;
Optional<CollectionAmendmentAvailableBalanceDebitItem> optionalCollectionAmendmentAvailableBalanceDebitItem = collectionAmendmentAvailableBalanceDebitItemValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentCollectionValidator collectionAmendmentCollectionValidator;
Optional<CollectionAmendmentCollection> optionalCollectionAmendmentCollection = collectionAmendmentCollectionValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentEnforcementDefaulterValidator collectionAmendmentEnforcementDefaulterValidator;
Optional<CollectionAmendmentEnforcementDefaulter> optionalCollectionAmendmentEnforcementDefaulter = collectionAmendmentEnforcementDefaulterValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentInterestRmicValidator collectionAmendmentInterestRmicValidator;
Optional<CollectionAmendmentInterestRmic> optionalCollectionAmendmentInterestRmic = collectionAmendmentInterestRmicValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentMemberAccountAllocationValidator collectionAmendmentMemberAccountAllocationValidator;
Optional<CollectionAmendmentMemberAccountAllocation> optionalCollectionAmendmentMemberAccountAllocation = collectionAmendmentMemberAccountAllocationValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentPayorderValidator collectionAmendmentPayorderValidator;
Optional<CollectionAmendmentPayorder> optionalCollectionAmendmentPayorder = collectionAmendmentPayorderValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentRemitanceDetailValidator collectionAmendmentRemitanceDetailValidator;
Optional<CollectionAmendmentRemitanceDetail> optionalCollectionAmendmentRemitanceDetail = collectionAmendmentRemitanceDetailValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentRequestValidator collectionAmendmentRequestValidator;
Optional<CollectionAmendmentRequest> optionalCollectionAmendmentRequest = collectionAmendmentRequestValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentRequestCollectionValidator collectionAmendmentRequestCollectionValidator;
Optional<CollectionAmendmentRequestCollection> optionalCollectionAmendmentRequestCollection = collectionAmendmentRequestCollectionValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentSelfEmploymentPaymentValidator collectionAmendmentSelfEmploymentPaymentValidator;
Optional<CollectionAmendmentSelfEmploymentPayment> optionalCollectionAmendmentSelfEmploymentPayment = collectionAmendmentSelfEmploymentPaymentValidator.validate(requestDto.getId());


@Autowired
private CollectionAmendmentSurchargeValidator collectionAmendmentSurchargeValidator;
Optional<CollectionAmendmentSurcharge> optionalCollectionAmendmentSurcharge = collectionAmendmentSurchargeValidator.validate(requestDto.getId());


@Autowired
private CollectionClaimExpressValidator collectionClaimExpressValidator;
Optional<CollectionClaimExpress> optionalCollectionClaimExpress = collectionClaimExpressValidator.validate(requestDto.getId());


@Autowired
private CollectionCourtValidator collectionCourtValidator;
Optional<CollectionCourt> optionalCollectionCourt = collectionCourtValidator.validate(requestDto.getId());


@Autowired
private CollectionCourtLegalCaseValidator collectionCourtLegalCaseValidator;
Optional<CollectionCourtLegalCase> optionalCollectionCourtLegalCase = collectionCourtLegalCaseValidator.validate(requestDto.getId());


@Autowired
private CollectionCourtLegalCaseErrorLevel2Validator collectionCourtLegalCaseErrorLevel2Validator;
Optional<CollectionCourtLegalCaseErrorLevel2> optionalCollectionCourtLegalCaseErrorLevel2 = collectionCourtLegalCaseErrorLevel2Validator.validate(requestDto.getId());


@Autowired
private CollectionDocumentValidator collectionDocumentValidator;
Optional<CollectionDocument> optionalCollectionDocument = collectionDocumentValidator.validate(requestDto.getId());


@Autowired
private CollectionDocumentSystemValidator collectionDocumentSystemValidator;
Optional<CollectionDocumentSystem> optionalCollectionDocumentSystem = collectionDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private CollectionDocumentSystemPrintValidator collectionDocumentSystemPrintValidator;
Optional<CollectionDocumentSystemPrint> optionalCollectionDocumentSystemPrint = collectionDocumentSystemPrintValidator.validate(requestDto.getId());


@Autowired
private CollectionEmployerServiceRequestValidator collectionEmployerServiceRequestValidator;
Optional<CollectionEmployerServiceRequest> optionalCollectionEmployerServiceRequest = collectionEmployerServiceRequestValidator.validate(requestDto.getId());


@Autowired
private CollectionErrorValidator collectionErrorValidator;
Optional<CollectionError> optionalCollectionError = collectionErrorValidator.validate(requestDto.getId());


@Autowired
private CollectionOtherAccountValidator collectionOtherAccountValidator;
Optional<CollectionOtherAccount> optionalCollectionOtherAccount = collectionOtherAccountValidator.validate(requestDto.getId());


@Autowired
private CollectionPaymentReferenceNoValidator collectionPaymentReferenceNoValidator;
Optional<CollectionPaymentReferenceNo> optionalCollectionPaymentReferenceNo = collectionPaymentReferenceNoValidator.validate(requestDto.getId());


@Autowired
private CollectionPaymentReferenceNoErrorLevel1Validator collectionPaymentReferenceNoErrorLevel1Validator;
Optional<CollectionPaymentReferenceNoErrorLevel1> optionalCollectionPaymentReferenceNoErrorLevel1 = collectionPaymentReferenceNoErrorLevel1Validator.validate(requestDto.getId());


@Autowired
private CollectionPaymentReferenceNoErrorLevel2Validator collectionPaymentReferenceNoErrorLevel2Validator;
Optional<CollectionPaymentReferenceNoErrorLevel2> optionalCollectionPaymentReferenceNoErrorLevel2 = collectionPaymentReferenceNoErrorLevel2Validator.validate(requestDto.getId());


@Autowired
private CollectionPostOfficeValidator collectionPostOfficeValidator;
Optional<CollectionPostOffice> optionalCollectionPostOffice = collectionPostOfficeValidator.validate(requestDto.getId());


@Autowired
private CollectionRemittanceDetailEmployerValidator collectionRemittanceDetailEmployerValidator;
Optional<CollectionRemittanceDetailEmployer> optionalCollectionRemittanceDetailEmployer = collectionRemittanceDetailEmployerValidator.validate(requestDto.getId());


@Autowired
private CollectionRemittanceDetailEmployerErrorLevel1Validator collectionRemittanceDetailEmployerErrorLevel1Validator;
Optional<CollectionRemittanceDetailEmployerErrorLevel1> optionalCollectionRemittanceDetailEmployerErrorLevel1 = collectionRemittanceDetailEmployerErrorLevel1Validator.validate(requestDto.getId());


@Autowired
private CollectionRemittanceDetailEmployerErrorLevel2Validator collectionRemittanceDetailEmployerErrorLevel2Validator;
Optional<CollectionRemittanceDetailEmployerErrorLevel2> optionalCollectionRemittanceDetailEmployerErrorLevel2 = collectionRemittanceDetailEmployerErrorLevel2Validator.validate(requestDto.getId());


@Autowired
private CollectionRemittanceDetailEmployerServiceRequestValidator collectionRemittanceDetailEmployerServiceRequestValidator;
Optional<CollectionRemittanceDetailEmployerServiceRequest> optionalCollectionRemittanceDetailEmployerServiceRequest = collectionRemittanceDetailEmployerServiceRequestValidator.validate(requestDto.getId());


@Autowired
private CollectionRemittanceDetailSelfAgentValidator collectionRemittanceDetailSelfAgentValidator;
Optional<CollectionRemittanceDetailSelfAgent> optionalCollectionRemittanceDetailSelfAgent = collectionRemittanceDetailSelfAgentValidator.validate(requestDto.getId());


@Autowired
private CollectionRemittanceDetailSelfAgentErrorLevel1Validator collectionRemittanceDetailSelfAgentErrorLevel1Validator;
Optional<CollectionRemittanceDetailSelfAgentErrorLevel1> optionalCollectionRemittanceDetailSelfAgentErrorLevel1 = collectionRemittanceDetailSelfAgentErrorLevel1Validator.validate(requestDto.getId());


@Autowired
private CollectionRemittanceDetailSelfAgentErrorLevel2Validator collectionRemittanceDetailSelfAgentErrorLevel2Validator;
Optional<CollectionRemittanceDetailSelfAgentErrorLevel2> optionalCollectionRemittanceDetailSelfAgentErrorLevel2 = collectionRemittanceDetailSelfAgentErrorLevel2Validator.validate(requestDto.getId());


@Autowired
private CollectionSelfAgentRemittanceDetalServiceRequestValidator collectionSelfAgentRemittanceDetalServiceRequestValidator;
Optional<CollectionSelfAgentRemittanceDetalServiceRequest> optionalCollectionSelfAgentRemittanceDetalServiceRequest = collectionSelfAgentRemittanceDetalServiceRequestValidator.validate(requestDto.getId());


@Autowired
private CollectionSelfAgentServiceRequestValidator collectionSelfAgentServiceRequestValidator;
Optional<CollectionSelfAgentServiceRequest> optionalCollectionSelfAgentServiceRequest = collectionSelfAgentServiceRequestValidator.validate(requestDto.getId());


@Autowired
private CollectionSelfEmploymentValidator collectionSelfEmploymentValidator;
Optional<CollectionSelfEmployment> optionalCollectionSelfEmployment = collectionSelfEmploymentValidator.validate(requestDto.getId());


@Autowired
private CollectionSelfEmploymentErrorLevel1Validator collectionSelfEmploymentErrorLevel1Validator;
Optional<CollectionSelfEmploymentErrorLevel1> optionalCollectionSelfEmploymentErrorLevel1 = collectionSelfEmploymentErrorLevel1Validator.validate(requestDto.getId());


@Autowired
private CollectionSelfEmploymentServiceRequestValidator collectionSelfEmploymentServiceRequestValidator;
Optional<CollectionSelfEmploymentServiceRequest> optionalCollectionSelfEmploymentServiceRequest = collectionSelfEmploymentServiceRequestValidator.validate(requestDto.getId());


@Autowired
private CollectionServiceRequestValidator collectionServiceRequestValidator;
Optional<CollectionServiceRequest> optionalCollectionServiceRequest = collectionServiceRequestValidator.validate(requestDto.getId());


@Autowired
private CollectionStatusHistoryValidator collectionStatusHistoryValidator;
Optional<CollectionStatusHistory> optionalCollectionStatusHistory = collectionStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private CollectionWithoutRemittanceDetailValidator collectionWithoutRemittanceDetailValidator;
Optional<CollectionWithoutRemittanceDetail> optionalCollectionWithoutRemittanceDetail = collectionWithoutRemittanceDetailValidator.validate(requestDto.getId());


@Autowired
private CollectionWithoutRemittanceDetailEmployerValidator collectionWithoutRemittanceDetailEmployerValidator;
Optional<CollectionWithoutRemittanceDetailEmployer> optionalCollectionWithoutRemittanceDetailEmployer = collectionWithoutRemittanceDetailEmployerValidator.validate(requestDto.getId());


@Autowired
private CollectionWithoutRemittanceDetailEmployerErrorLevel1Validator collectionWithoutRemittanceDetailEmployerErrorLevel1Validator;
Optional<CollectionWithoutRemittanceDetailEmployerErrorLevel1> optionalCollectionWithoutRemittanceDetailEmployerErrorLevel1 = collectionWithoutRemittanceDetailEmployerErrorLevel1Validator.validate(requestDto.getId());


@Autowired
private CollectionWithoutRemittanceDetailSelfAgentValidator collectionWithoutRemittanceDetailSelfAgentValidator;
Optional<CollectionWithoutRemittanceDetailSelfAgent> optionalCollectionWithoutRemittanceDetailSelfAgent = collectionWithoutRemittanceDetailSelfAgentValidator.validate(requestDto.getId());


@Autowired
private CollectionWithoutRemittanceDetailSelfAgentErrorLevel1Validator collectionWithoutRemittanceDetailSelfAgentErrorLevel1Validator;
Optional<CollectionWithoutRemittanceDetailSelfAgentErrorLevel1> optionalCollectionWithoutRemittanceDetailSelfAgentErrorLevel1 = collectionWithoutRemittanceDetailSelfAgentErrorLevel1Validator.validate(requestDto.getId());


@Autowired
private ContactInfoValidator contactInfoValidator;
Optional<ContactInfo> optionalContactInfo = contactInfoValidator.validate(requestDto.getId());


@Autowired
private DisbursementValidator disbursementValidator;
Optional<Disbursement> optionalDisbursement = disbursementValidator.validate(requestDto.getId());


@Autowired
private DisbursementHoldHistoryValidator disbursementHoldHistoryValidator;
Optional<DisbursementHoldHistory> optionalDisbursementHoldHistory = disbursementHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private DisbursementStatusHistoryValidator disbursementStatusHistoryValidator;
Optional<DisbursementStatusHistory> optionalDisbursementStatusHistory = disbursementStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private DmuInboundValidator dmuInboundValidator;
Optional<DmuInbound> optionalDmuInbound = dmuInboundValidator.validate(requestDto.getId());


@Autowired
private DmuInboundBatchValidator dmuInboundBatchValidator;
Optional<DmuInboundBatch> optionalDmuInboundBatch = dmuInboundBatchValidator.validate(requestDto.getId());


@Autowired
private DmuInboundBatchDocumentValidator dmuInboundBatchDocumentValidator;
Optional<DmuInboundBatchDocument> optionalDmuInboundBatchDocument = dmuInboundBatchDocumentValidator.validate(requestDto.getId());


@Autowired
private DmuInboundByhandValidator dmuInboundByhandValidator;
Optional<DmuInboundByhand> optionalDmuInboundByhand = dmuInboundByhandValidator.validate(requestDto.getId());


@Autowired
private DmuInboundChequeValidator dmuInboundChequeValidator;
Optional<DmuInboundCheque> optionalDmuInboundCheque = dmuInboundChequeValidator.validate(requestDto.getId());


@Autowired
private DmuInboundCollectionTypeValidator dmuInboundCollectionTypeValidator;
Optional<DmuInboundCollectionType> optionalDmuInboundCollectionType = dmuInboundCollectionTypeValidator.validate(requestDto.getId());


@Autowired
private DmuInboundCourireValidator dmuInboundCourireValidator;
Optional<DmuInboundCourire> optionalDmuInboundCourire = dmuInboundCourireValidator.validate(requestDto.getId());


@Autowired
private DmuInboundDeliveryBatchValidator dmuInboundDeliveryBatchValidator;
Optional<DmuInboundDeliveryBatch> optionalDmuInboundDeliveryBatch = dmuInboundDeliveryBatchValidator.validate(requestDto.getId());


@Autowired
private DmuInboundDeliveryBatchItemValidator dmuInboundDeliveryBatchItemValidator;
Optional<DmuInboundDeliveryBatchItem> optionalDmuInboundDeliveryBatchItem = dmuInboundDeliveryBatchItemValidator.validate(requestDto.getId());


@Autowired
private DmuInboundDeliveryBatchStatusHistoryValidator dmuInboundDeliveryBatchStatusHistoryValidator;
Optional<DmuInboundDeliveryBatchStatusHistory> optionalDmuInboundDeliveryBatchStatusHistory = dmuInboundDeliveryBatchStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private DmuInboundDocumentValidator dmuInboundDocumentValidator;
Optional<DmuInboundDocument> optionalDmuInboundDocument = dmuInboundDocumentValidator.validate(requestDto.getId());


@Autowired
private DmuInboundJoinValidator dmuInboundJoinValidator;
Optional<DmuInboundJoin> optionalDmuInboundJoin = dmuInboundJoinValidator.validate(requestDto.getId());


@Autowired
private DmuInboundMoneyOrderValidator dmuInboundMoneyOrderValidator;
Optional<DmuInboundMoneyOrder> optionalDmuInboundMoneyOrder = dmuInboundMoneyOrderValidator.validate(requestDto.getId());


@Autowired
private DmuInboundPostOfficeScheduleValidator dmuInboundPostOfficeScheduleValidator;
Optional<DmuInboundPostOfficeSchedule> optionalDmuInboundPostOfficeSchedule = dmuInboundPostOfficeScheduleValidator.validate(requestDto.getId());


@Autowired
private DmuInboundSenderEmployerValidator dmuInboundSenderEmployerValidator;
Optional<DmuInboundSenderEmployer> optionalDmuInboundSenderEmployer = dmuInboundSenderEmployerValidator.validate(requestDto.getId());


@Autowired
private DmuInboundSenderOtherValidator dmuInboundSenderOtherValidator;
Optional<DmuInboundSenderOther> optionalDmuInboundSenderOther = dmuInboundSenderOtherValidator.validate(requestDto.getId());


@Autowired
private DmuInboundSenderPersonValidator dmuInboundSenderPersonValidator;
Optional<DmuInboundSenderPerson> optionalDmuInboundSenderPerson = dmuInboundSenderPersonValidator.validate(requestDto.getId());


@Autowired
private DmuInboundSenderSelfEmploymentAgentValidator dmuInboundSenderSelfEmploymentAgentValidator;
Optional<DmuInboundSenderSelfEmploymentAgent> optionalDmuInboundSenderSelfEmploymentAgent = dmuInboundSenderSelfEmploymentAgentValidator.validate(requestDto.getId());


@Autowired
private DmuInboundStatusHistoryValidator dmuInboundStatusHistoryValidator;
Optional<DmuInboundStatusHistory> optionalDmuInboundStatusHistory = dmuInboundStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundValidator dmuOutboundValidator;
Optional<DmuOutbound> optionalDmuOutbound = dmuOutboundValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundByhandValidator dmuOutboundByhandValidator;
Optional<DmuOutboundByhand> optionalDmuOutboundByhand = dmuOutboundByhandValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundCourireValidator dmuOutboundCourireValidator;
Optional<DmuOutboundCourire> optionalDmuOutboundCourire = dmuOutboundCourireValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDeliveryBatchValidator dmuOutboundDeliveryBatchValidator;
Optional<DmuOutboundDeliveryBatch> optionalDmuOutboundDeliveryBatch = dmuOutboundDeliveryBatchValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDeliveryBatchItemValidator dmuOutboundDeliveryBatchItemValidator;
Optional<DmuOutboundDeliveryBatchItem> optionalDmuOutboundDeliveryBatchItem = dmuOutboundDeliveryBatchItemValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDeliveryBatchStatusHistoryValidator dmuOutboundDeliveryBatchStatusHistoryValidator;
Optional<DmuOutboundDeliveryBatchStatusHistory> optionalDmuOutboundDeliveryBatchStatusHistory = dmuOutboundDeliveryBatchStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDeliveryChargeValidator dmuOutboundDeliveryChargeValidator;
Optional<DmuOutboundDeliveryCharge> optionalDmuOutboundDeliveryCharge = dmuOutboundDeliveryChargeValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDivisionScheduleValidator dmuOutboundDivisionScheduleValidator;
Optional<DmuOutboundDivisionSchedule> optionalDmuOutboundDivisionSchedule = dmuOutboundDivisionScheduleValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDivisionScheduleCanceledItemValidator dmuOutboundDivisionScheduleCanceledItemValidator;
Optional<DmuOutboundDivisionScheduleCanceledItem> optionalDmuOutboundDivisionScheduleCanceledItem = dmuOutboundDivisionScheduleCanceledItemValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDivisionScheduleStatusHistoryValidator dmuOutboundDivisionScheduleStatusHistoryValidator;
Optional<DmuOutboundDivisionScheduleStatusHistory> optionalDmuOutboundDivisionScheduleStatusHistory = dmuOutboundDivisionScheduleStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDocumentValidator dmuOutboundDocumentValidator;
Optional<DmuOutboundDocument> optionalDmuOutboundDocument = dmuOutboundDocumentValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundDocumentModuleValidator dmuOutboundDocumentModuleValidator;
Optional<DmuOutboundDocumentModule> optionalDmuOutboundDocumentModule = dmuOutboundDocumentModuleValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundPostOfficeScheduleValidator dmuOutboundPostOfficeScheduleValidator;
Optional<DmuOutboundPostOfficeSchedule> optionalDmuOutboundPostOfficeSchedule = dmuOutboundPostOfficeScheduleValidator.validate(requestDto.getId());


@Autowired
private DmuOutboundStatusHistoryValidator dmuOutboundStatusHistoryValidator;
Optional<DmuOutboundStatusHistory> optionalDmuOutboundStatusHistory = dmuOutboundStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private DocumentUploadedValidator documentUploadedValidator;
Optional<DocumentUploaded> optionalDocumentUploaded = documentUploadedValidator.validate(requestDto.getId());


@Autowired
private EmployerValidator employerValidator;
Optional<Employer> optionalEmployer = employerValidator.validate(requestDto.getId());


@Autowired
private EmployerAvailableBalanceValidator employerAvailableBalanceValidator;
Optional<EmployerAvailableBalance> optionalEmployerAvailableBalance = employerAvailableBalanceValidator.validate(requestDto.getId());


@Autowired
private EmployerBranchValidator employerBranchValidator;
Optional<EmployerBranch> optionalEmployerBranch = employerBranchValidator.validate(requestDto.getId());


@Autowired
private EmployerBranchContactValidator employerBranchContactValidator;
Optional<EmployerBranchContact> optionalEmployerBranchContact = employerBranchContactValidator.validate(requestDto.getId());


@Autowired
private EmployerBranchContactPersonValidator employerBranchContactPersonValidator;
Optional<EmployerBranchContactPerson> optionalEmployerBranchContactPerson = employerBranchContactPersonValidator.validate(requestDto.getId());


@Autowired
private EmployerBranchContactPersonHistoryValidator employerBranchContactPersonHistoryValidator;
Optional<EmployerBranchContactPersonHistory> optionalEmployerBranchContactPersonHistory = employerBranchContactPersonHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerBranchCourtValidator employerBranchCourtValidator;
Optional<EmployerBranchCourt> optionalEmployerBranchCourt = employerBranchCourtValidator.validate(requestDto.getId());


@Autowired
private EmployerBranchHistoryValidator employerBranchHistoryValidator;
Optional<EmployerBranchHistory> optionalEmployerBranchHistory = employerBranchHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerBranchUserValidator employerBranchUserValidator;
Optional<EmployerBranchUser> optionalEmployerBranchUser = employerBranchUserValidator.validate(requestDto.getId());


@Autowired
private EmployerDirectorValidator employerDirectorValidator;
Optional<EmployerDirector> optionalEmployerDirector = employerDirectorValidator.validate(requestDto.getId());


@Autowired
private EmployerDirectorHistoryValidator employerDirectorHistoryValidator;
Optional<EmployerDirectorHistory> optionalEmployerDirectorHistory = employerDirectorHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerDirectorSignatureValidator employerDirectorSignatureValidator;
Optional<EmployerDirectorSignature> optionalEmployerDirectorSignature = employerDirectorSignatureValidator.validate(requestDto.getId());


@Autowired
private EmployerDocumentValidator employerDocumentValidator;
Optional<EmployerDocument> optionalEmployerDocument = employerDocumentValidator.validate(requestDto.getId());


@Autowired
private EmployerDocumentSystemValidator employerDocumentSystemValidator;
Optional<EmployerDocumentSystem> optionalEmployerDocumentSystem = employerDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private EmployerDocumentSystemPrintValidator employerDocumentSystemPrintValidator;
Optional<EmployerDocumentSystemPrint> optionalEmployerDocumentSystemPrint = employerDocumentSystemPrintValidator.validate(requestDto.getId());


@Autowired
private EmployerDueValidator employerDueValidator;
Optional<EmployerDue> optionalEmployerDue = employerDueValidator.validate(requestDto.getId());


@Autowired
private EmployerDueAllocationValidator employerDueAllocationValidator;
Optional<EmployerDueAllocation> optionalEmployerDueAllocation = employerDueAllocationValidator.validate(requestDto.getId());


@Autowired
private EmployerDueHoldHistoryValidator employerDueHoldHistoryValidator;
Optional<EmployerDueHoldHistory> optionalEmployerDueHoldHistory = employerDueHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerDueStatusHistoryValidator employerDueStatusHistoryValidator;
Optional<EmployerDueStatusHistory> optionalEmployerDueStatusHistory = employerDueStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerEmploymentRequestServiceCounterDmuValidator employerEmploymentRequestServiceCounterDmuValidator;
Optional<EmployerEmploymentRequestServiceCounterDmu> optionalEmployerEmploymentRequestServiceCounterDmu = employerEmploymentRequestServiceCounterDmuValidator.validate(requestDto.getId());


@Autowired
private EmployerGeneralContactValidator employerGeneralContactValidator;
Optional<EmployerGeneralContact> optionalEmployerGeneralContact = employerGeneralContactValidator.validate(requestDto.getId());


@Autowired
private EmployerHistoryValidator employerHistoryValidator;
Optional<EmployerHistory> optionalEmployerHistory = employerHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimValidator employerInterimValidator;
Optional<EmployerInterim> optionalEmployerInterim = employerInterimValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimBranchValidator employerInterimBranchValidator;
Optional<EmployerInterimBranch> optionalEmployerInterimBranch = employerInterimBranchValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimBranchContactValidator employerInterimBranchContactValidator;
Optional<EmployerInterimBranchContact> optionalEmployerInterimBranchContact = employerInterimBranchContactValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimBranchContactPersonValidator employerInterimBranchContactPersonValidator;
Optional<EmployerInterimBranchContactPerson> optionalEmployerInterimBranchContactPerson = employerInterimBranchContactPersonValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimBranchCourtValidator employerInterimBranchCourtValidator;
Optional<EmployerInterimBranchCourt> optionalEmployerInterimBranchCourt = employerInterimBranchCourtValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimBranchUserValidator employerInterimBranchUserValidator;
Optional<EmployerInterimBranchUser> optionalEmployerInterimBranchUser = employerInterimBranchUserValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimDirectorValidator employerInterimDirectorValidator;
Optional<EmployerInterimDirector> optionalEmployerInterimDirector = employerInterimDirectorValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimDirectorPersonAddressReferenceValidator employerInterimDirectorPersonAddressReferenceValidator;
Optional<EmployerInterimDirectorPersonAddressReference> optionalEmployerInterimDirectorPersonAddressReference = employerInterimDirectorPersonAddressReferenceValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimDirectorPersonContactReferenceValidator employerInterimDirectorPersonContactReferenceValidator;
Optional<EmployerInterimDirectorPersonContactReference> optionalEmployerInterimDirectorPersonContactReference = employerInterimDirectorPersonContactReferenceValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimDocumentValidator employerInterimDocumentValidator;
Optional<EmployerInterimDocument> optionalEmployerInterimDocument = employerInterimDocumentValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimGeneralContactValidator employerInterimGeneralContactValidator;
Optional<EmployerInterimGeneralContact> optionalEmployerInterimGeneralContact = employerInterimGeneralContactValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimMemberAccountValidator employerInterimMemberAccountValidator;
Optional<EmployerInterimMemberAccount> optionalEmployerInterimMemberAccount = employerInterimMemberAccountValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimUserValidator employerInterimUserValidator;
Optional<EmployerInterimUser> optionalEmployerInterimUser = employerInterimUserValidator.validate(requestDto.getId());


@Autowired
private EmployerInterimUserMemberGroupValidator employerInterimUserMemberGroupValidator;
Optional<EmployerInterimUserMemberGroup> optionalEmployerInterimUserMemberGroup = employerInterimUserMemberGroupValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountValidator employerMemberAccountValidator;
Optional<EmployerMemberAccount> optionalEmployerMemberAccount = employerMemberAccountValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountAddressHistoryValidator employerMemberAccountAddressHistoryValidator;
Optional<EmployerMemberAccountAddressHistory> optionalEmployerMemberAccountAddressHistory = employerMemberAccountAddressHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountBulkValidator employerMemberAccountBulkValidator;
Optional<EmployerMemberAccountBulk> optionalEmployerMemberAccountBulk = employerMemberAccountBulkValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountBulkItemValidator employerMemberAccountBulkItemValidator;
Optional<EmployerMemberAccountBulkItem> optionalEmployerMemberAccountBulkItem = employerMemberAccountBulkItemValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountBulkItemErrorValidator employerMemberAccountBulkItemErrorValidator;
Optional<EmployerMemberAccountBulkItemError> optionalEmployerMemberAccountBulkItemError = employerMemberAccountBulkItemErrorValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountContactHistoryValidator employerMemberAccountContactHistoryValidator;
Optional<EmployerMemberAccountContactHistory> optionalEmployerMemberAccountContactHistory = employerMemberAccountContactHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountHistoryValidator employerMemberAccountHistoryValidator;
Optional<EmployerMemberAccountHistory> optionalEmployerMemberAccountHistory = employerMemberAccountHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountMergeValidator employerMemberAccountMergeValidator;
Optional<EmployerMemberAccountMerge> optionalEmployerMemberAccountMerge = employerMemberAccountMergeValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountMergeChildValidator employerMemberAccountMergeChildValidator;
Optional<EmployerMemberAccountMergeChild> optionalEmployerMemberAccountMergeChild = employerMemberAccountMergeChildValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountStatusHistoryValidator employerMemberAccountStatusHistoryValidator;
Optional<EmployerMemberAccountStatusHistory> optionalEmployerMemberAccountStatusHistory = employerMemberAccountStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountUnmergeValidator employerMemberAccountUnmergeValidator;
Optional<EmployerMemberAccountUnmerge> optionalEmployerMemberAccountUnmerge = employerMemberAccountUnmergeValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountUnmergeChildValidator employerMemberAccountUnmergeChildValidator;
Optional<EmployerMemberAccountUnmergeChild> optionalEmployerMemberAccountUnmergeChild = employerMemberAccountUnmergeChildValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberAccountUpdateRequestValidator employerMemberAccountUpdateRequestValidator;
Optional<EmployerMemberAccountUpdateRequest> optionalEmployerMemberAccountUpdateRequest = employerMemberAccountUpdateRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberDocumentValidator employerMemberDocumentValidator;
Optional<EmployerMemberDocument> optionalEmployerMemberDocument = employerMemberDocumentValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberNoUniqueValidator employerMemberNoUniqueValidator;
Optional<EmployerMemberNoUnique> optionalEmployerMemberNoUnique = employerMemberNoUniqueValidator.validate(requestDto.getId());


@Autowired
private EmployerMemberNoUniquePKValidator employerMemberNoUniquePKValidator;
Optional<EmployerMemberNoUniquePK> optionalEmployerMemberNoUniquePK = employerMemberNoUniquePKValidator.validate(requestDto.getId());


@Autowired
private EmployerMergeValidator employerMergeValidator;
Optional<EmployerMerge> optionalEmployerMerge = employerMergeValidator.validate(requestDto.getId());


@Autowired
private EmployerMergeChildValidator employerMergeChildValidator;
Optional<EmployerMergeChild> optionalEmployerMergeChild = employerMergeChildValidator.validate(requestDto.getId());


@Autowired
private EmployerMessageValidator employerMessageValidator;
Optional<EmployerMessage> optionalEmployerMessage = employerMessageValidator.validate(requestDto.getId());


@Autowired
private EmployerNotificationValidator employerNotificationValidator;
Optional<EmployerNotification> optionalEmployerNotification = employerNotificationValidator.validate(requestDto.getId());


@Autowired
private EmployerPaymentValidator employerPaymentValidator;
Optional<EmployerPayment> optionalEmployerPayment = employerPaymentValidator.validate(requestDto.getId());


@Autowired
private EmployerPaymentCollectionValidator employerPaymentCollectionValidator;
Optional<EmployerPaymentCollection> optionalEmployerPaymentCollection = employerPaymentCollectionValidator.validate(requestDto.getId());


@Autowired
private EmployerPaymentDocumentValidator employerPaymentDocumentValidator;
Optional<EmployerPaymentDocument> optionalEmployerPaymentDocument = employerPaymentDocumentValidator.validate(requestDto.getId());


@Autowired
private EmployerPaymentDueValidator employerPaymentDueValidator;
Optional<EmployerPaymentDue> optionalEmployerPaymentDue = employerPaymentDueValidator.validate(requestDto.getId());


@Autowired
private EmployerPaymentRemittanceDetailValidator employerPaymentRemittanceDetailValidator;
Optional<EmployerPaymentRemittanceDetail> optionalEmployerPaymentRemittanceDetail = employerPaymentRemittanceDetailValidator.validate(requestDto.getId());


@Autowired
private EmployerPaymentStatusHistoryValidator employerPaymentStatusHistoryValidator;
Optional<EmployerPaymentStatusHistory> optionalEmployerPaymentStatusHistory = employerPaymentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderValidator employerPayorderValidator;
Optional<EmployerPayorder> optionalEmployerPayorder = employerPayorderValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderAmendmentHoldHistoryValidator employerPayorderAmendmentHoldHistoryValidator;
Optional<EmployerPayorderAmendmentHoldHistory> optionalEmployerPayorderAmendmentHoldHistory = employerPayorderAmendmentHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderAmendmentRemittanceDetailValidator employerPayorderAmendmentRemittanceDetailValidator;
Optional<EmployerPayorderAmendmentRemittanceDetail> optionalEmployerPayorderAmendmentRemittanceDetail = employerPayorderAmendmentRemittanceDetailValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderAmendmentRequestValidator employerPayorderAmendmentRequestValidator;
Optional<EmployerPayorderAmendmentRequest> optionalEmployerPayorderAmendmentRequest = employerPayorderAmendmentRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderAmendmentRequestCollectionValidator employerPayorderAmendmentRequestCollectionValidator;
Optional<EmployerPayorderAmendmentRequestCollection> optionalEmployerPayorderAmendmentRequestCollection = employerPayorderAmendmentRequestCollectionValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderAmendmentStatusHistoryValidator employerPayorderAmendmentStatusHistoryValidator;
Optional<EmployerPayorderAmendmentStatusHistory> optionalEmployerPayorderAmendmentStatusHistory = employerPayorderAmendmentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderInstalmentValidator employerPayorderInstalmentValidator;
Optional<EmployerPayorderInstalment> optionalEmployerPayorderInstalment = employerPayorderInstalmentValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderInstalmentHoldHistoryValidator employerPayorderInstalmentHoldHistoryValidator;
Optional<EmployerPayorderInstalmentHoldHistory> optionalEmployerPayorderInstalmentHoldHistory = employerPayorderInstalmentHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderInstalmentRequestValidator employerPayorderInstalmentRequestValidator;
Optional<EmployerPayorderInstalmentRequest> optionalEmployerPayorderInstalmentRequest = employerPayorderInstalmentRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderInstalmentStatusHistoryValidator employerPayorderInstalmentStatusHistoryValidator;
Optional<EmployerPayorderInstalmentStatusHistory> optionalEmployerPayorderInstalmentStatusHistory = employerPayorderInstalmentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderLegalCheckListValidator employerPayorderLegalCheckListValidator;
Optional<EmployerPayorderLegalCheckList> optionalEmployerPayorderLegalCheckList = employerPayorderLegalCheckListValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderReminderValidator employerPayorderReminderValidator;
Optional<EmployerPayorderReminder> optionalEmployerPayorderReminder = employerPayorderReminderValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderReminderInstalmentValidator employerPayorderReminderInstalmentValidator;
Optional<EmployerPayorderReminderInstalment> optionalEmployerPayorderReminderInstalment = employerPayorderReminderInstalmentValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderRemittanceDetailValidator employerPayorderRemittanceDetailValidator;
Optional<EmployerPayorderRemittanceDetail> optionalEmployerPayorderRemittanceDetail = employerPayorderRemittanceDetailValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderRemittanceDetailReminderValidator employerPayorderRemittanceDetailReminderValidator;
Optional<EmployerPayorderRemittanceDetailReminder> optionalEmployerPayorderRemittanceDetailReminder = employerPayorderRemittanceDetailReminderValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderServiceRequestValidator employerPayorderServiceRequestValidator;
Optional<EmployerPayorderServiceRequest> optionalEmployerPayorderServiceRequest = employerPayorderServiceRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerPayorderStatusHistoryValidator employerPayorderStatusHistoryValidator;
Optional<EmployerPayorderStatusHistory> optionalEmployerPayorderStatusHistory = employerPayorderStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestBranchAddValidator employerRequestBranchAddValidator;
Optional<EmployerRequestBranchAdd> optionalEmployerRequestBranchAdd = employerRequestBranchAddValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestBranchUpdateValidator employerRequestBranchUpdateValidator;
Optional<EmployerRequestBranchUpdate> optionalEmployerRequestBranchUpdate = employerRequestBranchUpdateValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestDirectorAddValidator employerRequestDirectorAddValidator;
Optional<EmployerRequestDirectorAdd> optionalEmployerRequestDirectorAdd = employerRequestDirectorAddValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestDirectorAddressAddupdateValidator employerRequestDirectorAddressAddupdateValidator;
Optional<EmployerRequestDirectorAddressAddupdate> optionalEmployerRequestDirectorAddressAddupdate = employerRequestDirectorAddressAddupdateValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestDirectorAddressReferenceValidator employerRequestDirectorAddressReferenceValidator;
Optional<EmployerRequestDirectorAddressReference> optionalEmployerRequestDirectorAddressReference = employerRequestDirectorAddressReferenceValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestDirectorContactAddupdateValidator employerRequestDirectorContactAddupdateValidator;
Optional<EmployerRequestDirectorContactAddupdate> optionalEmployerRequestDirectorContactAddupdate = employerRequestDirectorContactAddupdateValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestDirectorContactReferenceValidator employerRequestDirectorContactReferenceValidator;
Optional<EmployerRequestDirectorContactReference> optionalEmployerRequestDirectorContactReference = employerRequestDirectorContactReferenceValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestDirectorUpdateValidator employerRequestDirectorUpdateValidator;
Optional<EmployerRequestDirectorUpdate> optionalEmployerRequestDirectorUpdate = employerRequestDirectorUpdateValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestGeneralContactAddupdateValidator employerRequestGeneralContactAddupdateValidator;
Optional<EmployerRequestGeneralContactAddupdate> optionalEmployerRequestGeneralContactAddupdate = employerRequestGeneralContactAddupdateValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestServiceCounterDmuValidator employerRequestServiceCounterDmuValidator;
Optional<EmployerRequestServiceCounterDmu> optionalEmployerRequestServiceCounterDmu = employerRequestServiceCounterDmuValidator.validate(requestDto.getId());


@Autowired
private EmployerRequestUpdateValidator employerRequestUpdateValidator;
Optional<EmployerRequestUpdate> optionalEmployerRequestUpdate = employerRequestUpdateValidator.validate(requestDto.getId());


@Autowired
private EmployerReturnPaymentValidator employerReturnPaymentValidator;
Optional<EmployerReturnPayment> optionalEmployerReturnPayment = employerReturnPaymentValidator.validate(requestDto.getId());


@Autowired
private EmployerScheduleVisitValidator employerScheduleVisitValidator;
Optional<EmployerScheduleVisit> optionalEmployerScheduleVisit = employerScheduleVisitValidator.validate(requestDto.getId());


@Autowired
private EmployerScheduleVisitCollectionValidator employerScheduleVisitCollectionValidator;
Optional<EmployerScheduleVisitCollection> optionalEmployerScheduleVisitCollection = employerScheduleVisitCollectionValidator.validate(requestDto.getId());


@Autowired
private EmployerScheduleVisitDocumentValidator employerScheduleVisitDocumentValidator;
Optional<EmployerScheduleVisitDocument> optionalEmployerScheduleVisitDocument = employerScheduleVisitDocumentValidator.validate(requestDto.getId());


@Autowired
private EmployerScheduleVisitStatusHistoryValidator employerScheduleVisitStatusHistoryValidator;
Optional<EmployerScheduleVisitStatusHistory> optionalEmployerScheduleVisitStatusHistory = employerScheduleVisitStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerStatusHistoryValidator employerStatusHistoryValidator;
Optional<EmployerStatusHistory> optionalEmployerStatusHistory = employerStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeValidator employerSurchargeValidator;
Optional<EmployerSurcharge> optionalEmployerSurcharge = employerSurchargeValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeValidator employerSurchargeNoticeValidator;
Optional<EmployerSurchargeNotice> optionalEmployerSurchargeNotice = employerSurchargeNoticeValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeAmendmentEmployerSurchargeValidator employerSurchargeNoticeAmendmentEmployerSurchargeValidator;
Optional<EmployerSurchargeNoticeAmendmentEmployerSurcharge> optionalEmployerSurchargeNoticeAmendmentEmployerSurcharge = employerSurchargeNoticeAmendmentEmployerSurchargeValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeAmendmentHoldHistoryValidator employerSurchargeNoticeAmendmentHoldHistoryValidator;
Optional<EmployerSurchargeNoticeAmendmentHoldHistory> optionalEmployerSurchargeNoticeAmendmentHoldHistory = employerSurchargeNoticeAmendmentHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeAmendmentRequestValidator employerSurchargeNoticeAmendmentRequestValidator;
Optional<EmployerSurchargeNoticeAmendmentRequest> optionalEmployerSurchargeNoticeAmendmentRequest = employerSurchargeNoticeAmendmentRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeAmendmentStatusHistoryValidator employerSurchargeNoticeAmendmentStatusHistoryValidator;
Optional<EmployerSurchargeNoticeAmendmentStatusHistory> optionalEmployerSurchargeNoticeAmendmentStatusHistory = employerSurchargeNoticeAmendmentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeDocumentValidator employerSurchargeNoticeDocumentValidator;
Optional<EmployerSurchargeNoticeDocument> optionalEmployerSurchargeNoticeDocument = employerSurchargeNoticeDocumentValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeDocumentSystemValidator employerSurchargeNoticeDocumentSystemValidator;
Optional<EmployerSurchargeNoticeDocumentSystem> optionalEmployerSurchargeNoticeDocumentSystem = employerSurchargeNoticeDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeDocumentSystemPrintValidator employerSurchargeNoticeDocumentSystemPrintValidator;
Optional<EmployerSurchargeNoticeDocumentSystemPrint> optionalEmployerSurchargeNoticeDocumentSystemPrint = employerSurchargeNoticeDocumentSystemPrintValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeInstalmentValidator employerSurchargeNoticeInstalmentValidator;
Optional<EmployerSurchargeNoticeInstalment> optionalEmployerSurchargeNoticeInstalment = employerSurchargeNoticeInstalmentValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeInstalmentHoldHistoryValidator employerSurchargeNoticeInstalmentHoldHistoryValidator;
Optional<EmployerSurchargeNoticeInstalmentHoldHistory> optionalEmployerSurchargeNoticeInstalmentHoldHistory = employerSurchargeNoticeInstalmentHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeInstalmentRequestValidator employerSurchargeNoticeInstalmentRequestValidator;
Optional<EmployerSurchargeNoticeInstalmentRequest> optionalEmployerSurchargeNoticeInstalmentRequest = employerSurchargeNoticeInstalmentRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeInstalmentStatusHistoryValidator employerSurchargeNoticeInstalmentStatusHistoryValidator;
Optional<EmployerSurchargeNoticeInstalmentStatusHistory> optionalEmployerSurchargeNoticeInstalmentStatusHistory = employerSurchargeNoticeInstalmentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeReminderValidator employerSurchargeNoticeReminderValidator;
Optional<EmployerSurchargeNoticeReminder> optionalEmployerSurchargeNoticeReminder = employerSurchargeNoticeReminderValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeReminderInstalmentValidator employerSurchargeNoticeReminderInstalmentValidator;
Optional<EmployerSurchargeNoticeReminderInstalment> optionalEmployerSurchargeNoticeReminderInstalment = employerSurchargeNoticeReminderInstalmentValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeServiceRequestValidator employerSurchargeNoticeServiceRequestValidator;
Optional<EmployerSurchargeNoticeServiceRequest> optionalEmployerSurchargeNoticeServiceRequest = employerSurchargeNoticeServiceRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeStatusHistoryValidator employerSurchargeNoticeStatusHistoryValidator;
Optional<EmployerSurchargeNoticeStatusHistory> optionalEmployerSurchargeNoticeStatusHistory = employerSurchargeNoticeStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeNoticeSurchargeValidator employerSurchargeNoticeSurchargeValidator;
Optional<EmployerSurchargeNoticeSurcharge> optionalEmployerSurchargeNoticeSurcharge = employerSurchargeNoticeSurchargeValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeRemittanceDetailValidator employerSurchargeRemittanceDetailValidator;
Optional<EmployerSurchargeRemittanceDetail> optionalEmployerSurchargeRemittanceDetail = employerSurchargeRemittanceDetailValidator.validate(requestDto.getId());


@Autowired
private EmployerSurchargeStatusHistoryValidator employerSurchargeStatusHistoryValidator;
Optional<EmployerSurchargeStatusHistory> optionalEmployerSurchargeStatusHistory = employerSurchargeStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerUnmergeValidator employerUnmergeValidator;
Optional<EmployerUnmerge> optionalEmployerUnmerge = employerUnmergeValidator.validate(requestDto.getId());


@Autowired
private EmployerUnmergeChildValidator employerUnmergeChildValidator;
Optional<EmployerUnmergeChild> optionalEmployerUnmergeChild = employerUnmergeChildValidator.validate(requestDto.getId());


@Autowired
private EmployerUserValidator employerUserValidator;
Optional<EmployerUser> optionalEmployerUser = employerUserValidator.validate(requestDto.getId());


@Autowired
private EmployerUserHistoryValidator employerUserHistoryValidator;
Optional<EmployerUserHistory> optionalEmployerUserHistory = employerUserHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerUserMemberGroupValidator employerUserMemberGroupValidator;
Optional<EmployerUserMemberGroup> optionalEmployerUserMemberGroup = employerUserMemberGroupValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationEpfBulkValidator employerVerificationEpfBulkValidator;
Optional<EmployerVerificationEpfBulk> optionalEmployerVerificationEpfBulk = employerVerificationEpfBulkValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationEpfBulkItemValidator employerVerificationEpfBulkItemValidator;
Optional<EmployerVerificationEpfBulkItem> optionalEmployerVerificationEpfBulkItem = employerVerificationEpfBulkItemValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationEpfBulkItemErrorValidator employerVerificationEpfBulkItemErrorValidator;
Optional<EmployerVerificationEpfBulkItemError> optionalEmployerVerificationEpfBulkItemError = employerVerificationEpfBulkItemErrorValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationRequestValidator employerVerificationRequestValidator;
Optional<EmployerVerificationRequest> optionalEmployerVerificationRequest = employerVerificationRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationRequestDocumentValidator employerVerificationRequestDocumentValidator;
Optional<EmployerVerificationRequestDocument> optionalEmployerVerificationRequestDocument = employerVerificationRequestDocumentValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationRequestEpfPushValidator employerVerificationRequestEpfPushValidator;
Optional<EmployerVerificationRequestEpfPush> optionalEmployerVerificationRequestEpfPush = employerVerificationRequestEpfPushValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationRequestFrontOfficeValidator employerVerificationRequestFrontOfficeValidator;
Optional<EmployerVerificationRequestFrontOffice> optionalEmployerVerificationRequestFrontOffice = employerVerificationRequestFrontOfficeValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationRequestHoldHistoryValidator employerVerificationRequestHoldHistoryValidator;
Optional<EmployerVerificationRequestHoldHistory> optionalEmployerVerificationRequestHoldHistory = employerVerificationRequestHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationRequestMessageValidator employerVerificationRequestMessageValidator;
Optional<EmployerVerificationRequestMessage> optionalEmployerVerificationRequestMessage = employerVerificationRequestMessageValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationRequestServiceRequestValidator employerVerificationRequestServiceRequestValidator;
Optional<EmployerVerificationRequestServiceRequest> optionalEmployerVerificationRequestServiceRequest = employerVerificationRequestServiceRequestValidator.validate(requestDto.getId());


@Autowired
private EmployerVerificationRequestStatusHistoryValidator employerVerificationRequestStatusHistoryValidator;
Optional<EmployerVerificationRequestStatusHistory> optionalEmployerVerificationRequestStatusHistory = employerVerificationRequestStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EnforcementDefaulterDocumentSystemValidator enforcementDefaulterDocumentSystemValidator;
Optional<EnforcementDefaulterDocumentSystem> optionalEnforcementDefaulterDocumentSystem = enforcementDefaulterDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private EnforcementDefaulterDocumentSystemPrintValidator enforcementDefaulterDocumentSystemPrintValidator;
Optional<EnforcementDefaulterDocumentSystemPrint> optionalEnforcementDefaulterDocumentSystemPrint = enforcementDefaulterDocumentSystemPrintValidator.validate(requestDto.getId());


@Autowired
private EnforcementDefaulterEmployerValidator enforcementDefaulterEmployerValidator;
Optional<EnforcementDefaulterEmployer> optionalEnforcementDefaulterEmployer = enforcementDefaulterEmployerValidator.validate(requestDto.getId());


@Autowired
private EnforcementDefaulterEmployerGenerateValidator enforcementDefaulterEmployerGenerateValidator;
Optional<EnforcementDefaulterEmployerGenerate> optionalEnforcementDefaulterEmployerGenerate = enforcementDefaulterEmployerGenerateValidator.validate(requestDto.getId());


@Autowired
private EnforcementDefaulterMultipleDocumentValidator enforcementDefaulterMultipleDocumentValidator;
Optional<EnforcementDefaulterMultipleDocument> optionalEnforcementDefaulterMultipleDocument = enforcementDefaulterMultipleDocumentValidator.validate(requestDto.getId());


@Autowired
private EnforcementDefaulterStatusHistoryValidator enforcementDefaulterStatusHistoryValidator;
Optional<EnforcementDefaulterStatusHistory> optionalEnforcementDefaulterStatusHistory = enforcementDefaulterStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerValidator enforcementEmployerValidator;
Optional<EnforcementEmployer> optionalEnforcementEmployer = enforcementEmployerValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerCallindirectiveValidator enforcementEmployerCallindirectiveValidator;
Optional<EnforcementEmployerCallindirective> optionalEnforcementEmployerCallindirective = enforcementEmployerCallindirectiveValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerCallindirectiveDocumentValidator enforcementEmployerCallindirectiveDocumentValidator;
Optional<EnforcementEmployerCallindirectiveDocument> optionalEnforcementEmployerCallindirectiveDocument = enforcementEmployerCallindirectiveDocumentValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerCallindirectiveStatusHistoryValidator enforcementEmployerCallindirectiveStatusHistoryValidator;
Optional<EnforcementEmployerCallindirectiveStatusHistory> optionalEnforcementEmployerCallindirectiveStatusHistory = enforcementEmployerCallindirectiveStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerDefaulterValidator enforcementEmployerDefaulterValidator;
Optional<EnforcementEmployerDefaulter> optionalEnforcementEmployerDefaulter = enforcementEmployerDefaulterValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerDocumentValidator enforcementEmployerDocumentValidator;
Optional<EnforcementEmployerDocument> optionalEnforcementEmployerDocument = enforcementEmployerDocumentValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerDocumentSystemValidator enforcementEmployerDocumentSystemValidator;
Optional<EnforcementEmployerDocumentSystem> optionalEnforcementEmployerDocumentSystem = enforcementEmployerDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerDocumentSystemPrintValidator enforcementEmployerDocumentSystemPrintValidator;
Optional<EnforcementEmployerDocumentSystemPrint> optionalEnforcementEmployerDocumentSystemPrint = enforcementEmployerDocumentSystemPrintValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerHoldHistoryValidator enforcementEmployerHoldHistoryValidator;
Optional<EnforcementEmployerHoldHistory> optionalEnforcementEmployerHoldHistory = enforcementEmployerHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionDirectorValidator enforcementEmployerInspectionDirectorValidator;
Optional<EnforcementEmployerInspectionDirector> optionalEnforcementEmployerInspectionDirector = enforcementEmployerInspectionDirectorValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionReportValidator enforcementEmployerInspectionReportValidator;
Optional<EnforcementEmployerInspectionReport> optionalEnforcementEmployerInspectionReport = enforcementEmployerInspectionReportValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionReportRemittanceValidator enforcementEmployerInspectionReportRemittanceValidator;
Optional<EnforcementEmployerInspectionReportRemittance> optionalEnforcementEmployerInspectionReportRemittance = enforcementEmployerInspectionReportRemittanceValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionReportTeamValidator enforcementEmployerInspectionReportTeamValidator;
Optional<EnforcementEmployerInspectionReportTeam> optionalEnforcementEmployerInspectionReportTeam = enforcementEmployerInspectionReportTeamValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionScheduleValidator enforcementEmployerInspectionScheduleValidator;
Optional<EnforcementEmployerInspectionSchedule> optionalEnforcementEmployerInspectionSchedule = enforcementEmployerInspectionScheduleValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionScheduleTeamValidator enforcementEmployerInspectionScheduleTeamValidator;
Optional<EnforcementEmployerInspectionScheduleTeam> optionalEnforcementEmployerInspectionScheduleTeam = enforcementEmployerInspectionScheduleTeamValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionSummaryValidator enforcementEmployerInspectionSummaryValidator;
Optional<EnforcementEmployerInspectionSummary> optionalEnforcementEmployerInspectionSummary = enforcementEmployerInspectionSummaryValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionSummaryPeriodValidator enforcementEmployerInspectionSummaryPeriodValidator;
Optional<EnforcementEmployerInspectionSummaryPeriod> optionalEnforcementEmployerInspectionSummaryPeriod = enforcementEmployerInspectionSummaryPeriodValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionVisitValidator enforcementEmployerInspectionVisitValidator;
Optional<EnforcementEmployerInspectionVisit> optionalEnforcementEmployerInspectionVisit = enforcementEmployerInspectionVisitValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerInspectionVisitTeamValidator enforcementEmployerInspectionVisitTeamValidator;
Optional<EnforcementEmployerInspectionVisitTeam> optionalEnforcementEmployerInspectionVisitTeam = enforcementEmployerInspectionVisitTeamValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerMemberContributionValidator enforcementEmployerMemberContributionValidator;
Optional<EnforcementEmployerMemberContribution> optionalEnforcementEmployerMemberContribution = enforcementEmployerMemberContributionValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerMemberContributionMonthValidator enforcementEmployerMemberContributionMonthValidator;
Optional<EnforcementEmployerMemberContributionMonth> optionalEnforcementEmployerMemberContributionMonth = enforcementEmployerMemberContributionMonthValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerMemberStatmentValidator enforcementEmployerMemberStatmentValidator;
Optional<EnforcementEmployerMemberStatment> optionalEnforcementEmployerMemberStatment = enforcementEmployerMemberStatmentValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerMemberStatmentEmploymentValidator enforcementEmployerMemberStatmentEmploymentValidator;
Optional<EnforcementEmployerMemberStatmentEmployment> optionalEnforcementEmployerMemberStatmentEmployment = enforcementEmployerMemberStatmentEmploymentValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerOwnerBranchChangeHistoryValidator enforcementEmployerOwnerBranchChangeHistoryValidator;
Optional<EnforcementEmployerOwnerBranchChangeHistory> optionalEnforcementEmployerOwnerBranchChangeHistory = enforcementEmployerOwnerBranchChangeHistoryValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerPerformanceValidator enforcementEmployerPerformanceValidator;
Optional<EnforcementEmployerPerformance> optionalEnforcementEmployerPerformance = enforcementEmployerPerformanceValidator.validate(requestDto.getId());


@Autowired
private EnforcementEmployerStatusHistoryValidator enforcementEmployerStatusHistoryValidator;
Optional<EnforcementEmployerStatusHistory> optionalEnforcementEmployerStatusHistory = enforcementEmployerStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EnforcementInspectionReportStatusHistoryValidator enforcementInspectionReportStatusHistoryValidator;
Optional<EnforcementInspectionReportStatusHistory> optionalEnforcementInspectionReportStatusHistory = enforcementInspectionReportStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EnforcementScheduleStatusHistoryValidator enforcementScheduleStatusHistoryValidator;
Optional<EnforcementScheduleStatusHistory> optionalEnforcementScheduleStatusHistory = enforcementScheduleStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private EtfbBankAccountValidator etfbBankAccountValidator;
Optional<EtfbBankAccount> optionalEtfbBankAccount = etfbBankAccountValidator.validate(requestDto.getId());


@Autowired
private EtfbBankAccountTransferValidator etfbBankAccountTransferValidator;
Optional<EtfbBankAccountTransfer> optionalEtfbBankAccountTransfer = etfbBankAccountTransferValidator.validate(requestDto.getId());


@Autowired
private IncompleteMemberMasterDataValidator incompleteMemberMasterDataValidator;
Optional<IncompleteMemberMasterData> optionalIncompleteMemberMasterData = incompleteMemberMasterDataValidator.validate(requestDto.getId());


@Autowired
private IncompleteMemberMasterDataCheckListValidator incompleteMemberMasterDataCheckListValidator;
Optional<IncompleteMemberMasterDataCheckList> optionalIncompleteMemberMasterDataCheckList = incompleteMemberMasterDataCheckListValidator.validate(requestDto.getId());


@Autowired
private IncompleteMemberMasterDataDocumentValidator incompleteMemberMasterDataDocumentValidator;
Optional<IncompleteMemberMasterDataDocument> optionalIncompleteMemberMasterDataDocument = incompleteMemberMasterDataDocumentValidator.validate(requestDto.getId());


@Autowired
private IncompleteMemberMasterDataHoldHistoryValidator incompleteMemberMasterDataHoldHistoryValidator;
Optional<IncompleteMemberMasterDataHoldHistory> optionalIncompleteMemberMasterDataHoldHistory = incompleteMemberMasterDataHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private IncompleteMemberMasterDataMessageValidator incompleteMemberMasterDataMessageValidator;
Optional<IncompleteMemberMasterDataMessage> optionalIncompleteMemberMasterDataMessage = incompleteMemberMasterDataMessageValidator.validate(requestDto.getId());


@Autowired
private IncompleteMemberMasterDataStatusHistoryValidator incompleteMemberMasterDataStatusHistoryValidator;
Optional<IncompleteMemberMasterDataStatusHistory> optionalIncompleteMemberMasterDataStatusHistory = incompleteMemberMasterDataStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicValidator intCalcAmicValidator;
Optional<IntCalcAmic> optionalIntCalcAmic = intCalcAmicValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicAmsStatusHistoryValidator intCalcAmicAmsStatusHistoryValidator;
Optional<IntCalcAmicAmsStatusHistory> optionalIntCalcAmicAmsStatusHistory = intCalcAmicAmsStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicDocumentValidator intCalcAmicDocumentValidator;
Optional<IntCalcAmicDocument> optionalIntCalcAmicDocument = intCalcAmicDocumentValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicMemberAccountAllocationValidator intCalcAmicMemberAccountAllocationValidator;
Optional<IntCalcAmicMemberAccountAllocation> optionalIntCalcAmicMemberAccountAllocation = intCalcAmicMemberAccountAllocationValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicMemberAccountAmsValidator intCalcAmicMemberAccountAmsValidator;
Optional<IntCalcAmicMemberAccountAms> optionalIntCalcAmicMemberAccountAms = intCalcAmicMemberAccountAmsValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicMemberAccountAmsAdjustmentValidator intCalcAmicMemberAccountAmsAdjustmentValidator;
Optional<IntCalcAmicMemberAccountAmsAdjustment> optionalIntCalcAmicMemberAccountAmsAdjustment = intCalcAmicMemberAccountAmsAdjustmentValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicMemberAccountAmsDocumentValidator intCalcAmicMemberAccountAmsDocumentValidator;
Optional<IntCalcAmicMemberAccountAmsDocument> optionalIntCalcAmicMemberAccountAmsDocument = intCalcAmicMemberAccountAmsDocumentValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicMemberAccountAmsForecastValidator intCalcAmicMemberAccountAmsForecastValidator;
Optional<IntCalcAmicMemberAccountAmsForecast> optionalIntCalcAmicMemberAccountAmsForecast = intCalcAmicMemberAccountAmsForecastValidator.validate(requestDto.getId());


@Autowired
private IntCalcAmicStatusHistoryValidator intCalcAmicStatusHistoryValidator;
Optional<IntCalcAmicStatusHistory> optionalIntCalcAmicStatusHistory = intCalcAmicStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private IntCalcFmicValidator intCalcFmicValidator;
Optional<IntCalcFmic> optionalIntCalcFmic = intCalcFmicValidator.validate(requestDto.getId());


@Autowired
private IntCalcFmicDocumentValidator intCalcFmicDocumentValidator;
Optional<IntCalcFmicDocument> optionalIntCalcFmicDocument = intCalcFmicDocumentValidator.validate(requestDto.getId());


@Autowired
private IntCalcFmicMemberAccountValidator intCalcFmicMemberAccountValidator;
Optional<IntCalcFmicMemberAccount> optionalIntCalcFmicMemberAccount = intCalcFmicMemberAccountValidator.validate(requestDto.getId());


@Autowired
private IntCalcFmicMemberAccountAmsValidator intCalcFmicMemberAccountAmsValidator;
Optional<IntCalcFmicMemberAccountAms> optionalIntCalcFmicMemberAccountAms = intCalcFmicMemberAccountAmsValidator.validate(requestDto.getId());


@Autowired
private IntCalcFmicMemberAccountMonthAllocationValidator intCalcFmicMemberAccountMonthAllocationValidator;
Optional<IntCalcFmicMemberAccountMonthAllocation> optionalIntCalcFmicMemberAccountMonthAllocation = intCalcFmicMemberAccountMonthAllocationValidator.validate(requestDto.getId());


@Autowired
private IntCalcFmicStatusHistoryValidator intCalcFmicStatusHistoryValidator;
Optional<IntCalcFmicStatusHistory> optionalIntCalcFmicStatusHistory = intCalcFmicStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private IntCalcOpeningAmicAmsMergeMemberAccountValidator intCalcOpeningAmicAmsMergeMemberAccountValidator;
Optional<IntCalcOpeningAmicAmsMergeMemberAccount> optionalIntCalcOpeningAmicAmsMergeMemberAccount = intCalcOpeningAmicAmsMergeMemberAccountValidator.validate(requestDto.getId());


@Autowired
private IntCalcRmicValidator intCalcRmicValidator;
Optional<IntCalcRmic> optionalIntCalcRmic = intCalcRmicValidator.validate(requestDto.getId());


@Autowired
private IntCalcRmicDocumentValidator intCalcRmicDocumentValidator;
Optional<IntCalcRmicDocument> optionalIntCalcRmicDocument = intCalcRmicDocumentValidator.validate(requestDto.getId());


@Autowired
private IntCalcRmicMemberAccountValidator intCalcRmicMemberAccountValidator;
Optional<IntCalcRmicMemberAccount> optionalIntCalcRmicMemberAccount = intCalcRmicMemberAccountValidator.validate(requestDto.getId());


@Autowired
private IntCalcRmicMemberAccountAllocationValidator intCalcRmicMemberAccountAllocationValidator;
Optional<IntCalcRmicMemberAccountAllocation> optionalIntCalcRmicMemberAccountAllocation = intCalcRmicMemberAccountAllocationValidator.validate(requestDto.getId());


@Autowired
private IntCalcRmicMemberAccountAmsValidator intCalcRmicMemberAccountAmsValidator;
Optional<IntCalcRmicMemberAccountAms> optionalIntCalcRmicMemberAccountAms = intCalcRmicMemberAccountAmsValidator.validate(requestDto.getId());


@Autowired
private IntCalcRmicStatusHistoryValidator intCalcRmicStatusHistoryValidator;
Optional<IntCalcRmicStatusHistory> optionalIntCalcRmicStatusHistory = intCalcRmicStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalCaseValidator legalCaseValidator;
Optional<LegalCase> optionalLegalCase = legalCaseValidator.validate(requestDto.getId());


@Autowired
private LegalCaseActionValidator legalCaseActionValidator;
Optional<LegalCaseAction> optionalLegalCaseAction = legalCaseActionValidator.validate(requestDto.getId());


@Autowired
private LegalCaseActionAttendeeValidator legalCaseActionAttendeeValidator;
Optional<LegalCaseActionAttendee> optionalLegalCaseActionAttendee = legalCaseActionAttendeeValidator.validate(requestDto.getId());


@Autowired
private LegalCaseCollectionHoldHistoryValidator legalCaseCollectionHoldHistoryValidator;
Optional<LegalCaseCollectionHoldHistory> optionalLegalCaseCollectionHoldHistory = legalCaseCollectionHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalCaseDocumentValidator legalCaseDocumentValidator;
Optional<LegalCaseDocument> optionalLegalCaseDocument = legalCaseDocumentValidator.validate(requestDto.getId());


@Autowired
private LegalCaseDocumentSystemValidator legalCaseDocumentSystemValidator;
Optional<LegalCaseDocumentSystem> optionalLegalCaseDocumentSystem = legalCaseDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private LegalCaseDocumentSystemStatusHistoryValidator legalCaseDocumentSystemStatusHistoryValidator;
Optional<LegalCaseDocumentSystemStatusHistory> optionalLegalCaseDocumentSystemStatusHistory = legalCaseDocumentSystemStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalCaseDocumentSystemUpdateHistoryValidator legalCaseDocumentSystemUpdateHistoryValidator;
Optional<LegalCaseDocumentSystemUpdateHistory> optionalLegalCaseDocumentSystemUpdateHistory = legalCaseDocumentSystemUpdateHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalCaseEmployerCourtPaymentInstalmentValidator legalCaseEmployerCourtPaymentInstalmentValidator;
Optional<LegalCaseEmployerCourtPaymentInstalment> optionalLegalCaseEmployerCourtPaymentInstalment = legalCaseEmployerCourtPaymentInstalmentValidator.validate(requestDto.getId());


@Autowired
private LegalCaseEmployerDueValidator legalCaseEmployerDueValidator;
Optional<LegalCaseEmployerDue> optionalLegalCaseEmployerDue = legalCaseEmployerDueValidator.validate(requestDto.getId());


@Autowired
private LegalCaseEmployerPayorderValidator legalCaseEmployerPayorderValidator;
Optional<LegalCaseEmployerPayorder> optionalLegalCaseEmployerPayorder = legalCaseEmployerPayorderValidator.validate(requestDto.getId());


@Autowired
private LegalCaseEmployerSurchargeNoticeValidator legalCaseEmployerSurchargeNoticeValidator;
Optional<LegalCaseEmployerSurchargeNotice> optionalLegalCaseEmployerSurchargeNotice = legalCaseEmployerSurchargeNoticeValidator.validate(requestDto.getId());


@Autowired
private LegalCaseEtfbPaymentValidator legalCaseEtfbPaymentValidator;
Optional<LegalCaseEtfbPayment> optionalLegalCaseEtfbPayment = legalCaseEtfbPaymentValidator.validate(requestDto.getId());


@Autowired
private LegalCaseEtfbPaymentInstalmentValidator legalCaseEtfbPaymentInstalmentValidator;
Optional<LegalCaseEtfbPaymentInstalment> optionalLegalCaseEtfbPaymentInstalment = legalCaseEtfbPaymentInstalmentValidator.validate(requestDto.getId());


@Autowired
private LegalCaseEventValidator legalCaseEventValidator;
Optional<LegalCaseEvent> optionalLegalCaseEvent = legalCaseEventValidator.validate(requestDto.getId());


@Autowired
private LegalCaseEventAttendeeValidator legalCaseEventAttendeeValidator;
Optional<LegalCaseEventAttendee> optionalLegalCaseEventAttendee = legalCaseEventAttendeeValidator.validate(requestDto.getId());


@Autowired
private LegalCaseOtherDepositTypeValidator legalCaseOtherDepositTypeValidator;
Optional<LegalCaseOtherDepositType> optionalLegalCaseOtherDepositType = legalCaseOtherDepositTypeValidator.validate(requestDto.getId());


@Autowired
private LegalCaseOtherPaymentValidator legalCaseOtherPaymentValidator;
Optional<LegalCaseOtherPayment> optionalLegalCaseOtherPayment = legalCaseOtherPaymentValidator.validate(requestDto.getId());


@Autowired
private LegalCaseOtherPaymentInstalmentValidator legalCaseOtherPaymentInstalmentValidator;
Optional<LegalCaseOtherPaymentInstalment> optionalLegalCaseOtherPaymentInstalment = legalCaseOtherPaymentInstalmentValidator.validate(requestDto.getId());


@Autowired
private LegalCaseOverpaymentRefundRequestValidator legalCaseOverpaymentRefundRequestValidator;
Optional<LegalCaseOverpaymentRefundRequest> optionalLegalCaseOverpaymentRefundRequest = legalCaseOverpaymentRefundRequestValidator.validate(requestDto.getId());


@Autowired
private LegalCaseOverpaymentRefundRequestStatusHistoryValidator legalCaseOverpaymentRefundRequestStatusHistoryValidator;
Optional<LegalCaseOverpaymentRefundRequestStatusHistory> optionalLegalCaseOverpaymentRefundRequestStatusHistory = legalCaseOverpaymentRefundRequestStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalCasePaymentInfoValidator legalCasePaymentInfoValidator;
Optional<LegalCasePaymentInfo> optionalLegalCasePaymentInfo = legalCasePaymentInfoValidator.validate(requestDto.getId());


@Autowired
private LegalCasePlaintiffValidator legalCasePlaintiffValidator;
Optional<LegalCasePlaintiff> optionalLegalCasePlaintiff = legalCasePlaintiffValidator.validate(requestDto.getId());


@Autowired
private LegalCasePlaintiffContactValidator legalCasePlaintiffContactValidator;
Optional<LegalCasePlaintiffContact> optionalLegalCasePlaintiffContact = legalCasePlaintiffContactValidator.validate(requestDto.getId());


@Autowired
private LegalCaseRespondentValidator legalCaseRespondentValidator;
Optional<LegalCaseRespondent> optionalLegalCaseRespondent = legalCaseRespondentValidator.validate(requestDto.getId());


@Autowired
private LegalCaseRespondentContactValidator legalCaseRespondentContactValidator;
Optional<LegalCaseRespondentContact> optionalLegalCaseRespondentContact = legalCaseRespondentContactValidator.validate(requestDto.getId());


@Autowired
private LegalCaseRespondentEmployerDirectorValidator legalCaseRespondentEmployerDirectorValidator;
Optional<LegalCaseRespondentEmployerDirector> optionalLegalCaseRespondentEmployerDirector = legalCaseRespondentEmployerDirectorValidator.validate(requestDto.getId());


@Autowired
private LegalCaseStageHistoryValidator legalCaseStageHistoryValidator;
Optional<LegalCaseStageHistory> optionalLegalCaseStageHistory = legalCaseStageHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalCaseStatusHistoryValidator legalCaseStatusHistoryValidator;
Optional<LegalCaseStatusHistory> optionalLegalCaseStatusHistory = legalCaseStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalDocumentSystemValidator legalDocumentSystemValidator;
Optional<LegalDocumentSystem> optionalLegalDocumentSystem = legalDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private LegalDocumentSystemLegalCaseValidator legalDocumentSystemLegalCaseValidator;
Optional<LegalDocumentSystemLegalCase> optionalLegalDocumentSystemLegalCase = legalDocumentSystemLegalCaseValidator.validate(requestDto.getId());


@Autowired
private LegalDocumentSystemLegalCaseStatusHistoryValidator legalDocumentSystemLegalCaseStatusHistoryValidator;
Optional<LegalDocumentSystemLegalCaseStatusHistory> optionalLegalDocumentSystemLegalCaseStatusHistory = legalDocumentSystemLegalCaseStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalDocumentSystemStatusHistoryValidator legalDocumentSystemStatusHistoryValidator;
Optional<LegalDocumentSystemStatusHistory> optionalLegalDocumentSystemStatusHistory = legalDocumentSystemStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private LegalDocumentSystemSubDocumentValidator legalDocumentSystemSubDocumentValidator;
Optional<LegalDocumentSystemSubDocument> optionalLegalDocumentSystemSubDocument = legalDocumentSystemSubDocumentValidator.validate(requestDto.getId());


@Autowired
private LegalDocumentSystemUpdateHistoryValidator legalDocumentSystemUpdateHistoryValidator;
Optional<LegalDocumentSystemUpdateHistory> optionalLegalDocumentSystemUpdateHistory = legalDocumentSystemUpdateHistoryValidator.validate(requestDto.getId());


@Autowired
private Member1Validator member1Validator;
Optional<Member1> optionalMember1 = member1Validator.validate(requestDto.getId());


@Autowired
private MemberAccountValidator memberAccountValidator;
Optional<MemberAccount> optionalMemberAccount = memberAccountValidator.validate(requestDto.getId());


@Autowired
private MemberAccountAllocationValidator memberAccountAllocationValidator;
Optional<MemberAccountAllocation> optionalMemberAccountAllocation = memberAccountAllocationValidator.validate(requestDto.getId());


@Autowired
private MemberAccountAllocationDocumentValidator memberAccountAllocationDocumentValidator;
Optional<MemberAccountAllocationDocument> optionalMemberAccountAllocationDocument = memberAccountAllocationDocumentValidator.validate(requestDto.getId());


@Autowired
private MemberAccountAllocationEmploymentValidator memberAccountAllocationEmploymentValidator;
Optional<MemberAccountAllocationEmployment> optionalMemberAccountAllocationEmployment = memberAccountAllocationEmploymentValidator.validate(requestDto.getId());


@Autowired
private MemberAccountAllocationSelfEmploymentValidator memberAccountAllocationSelfEmploymentValidator;
Optional<MemberAccountAllocationSelfEmployment> optionalMemberAccountAllocationSelfEmployment = memberAccountAllocationSelfEmploymentValidator.validate(requestDto.getId());


@Autowired
private MemberAccountAllocationStatusHistoryValidator memberAccountAllocationStatusHistoryValidator;
Optional<MemberAccountAllocationStatusHistory> optionalMemberAccountAllocationStatusHistory = memberAccountAllocationStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private MemberAccountMergeValidator memberAccountMergeValidator;
Optional<MemberAccountMerge> optionalMemberAccountMerge = memberAccountMergeValidator.validate(requestDto.getId());


@Autowired
private MemberAccountNomineeValidator memberAccountNomineeValidator;
Optional<MemberAccountNominee> optionalMemberAccountNominee = memberAccountNomineeValidator.validate(requestDto.getId());


@Autowired
private MemberAccountNomineeHistoryValidator memberAccountNomineeHistoryValidator;
Optional<MemberAccountNomineeHistory> optionalMemberAccountNomineeHistory = memberAccountNomineeHistoryValidator.validate(requestDto.getId());


@Autowired
private MemberAccountStatusHistoryValidator memberAccountStatusHistoryValidator;
Optional<MemberAccountStatusHistory> optionalMemberAccountStatusHistory = memberAccountStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestValidator memberEmploymentRequestValidator;
Optional<MemberEmploymentRequest> optionalMemberEmploymentRequest = memberEmploymentRequestValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestAddressValidator memberEmploymentRequestAddressValidator;
Optional<MemberEmploymentRequestAddress> optionalMemberEmploymentRequestAddress = memberEmploymentRequestAddressValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestContactValidator memberEmploymentRequestContactValidator;
Optional<MemberEmploymentRequestContact> optionalMemberEmploymentRequestContact = memberEmploymentRequestContactValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestDocumentValidator memberEmploymentRequestDocumentValidator;
Optional<MemberEmploymentRequestDocument> optionalMemberEmploymentRequestDocument = memberEmploymentRequestDocumentValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestNomineeValidator memberEmploymentRequestNomineeValidator;
Optional<MemberEmploymentRequestNominee> optionalMemberEmploymentRequestNominee = memberEmploymentRequestNomineeValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestNomineeAddressValidator memberEmploymentRequestNomineeAddressValidator;
Optional<MemberEmploymentRequestNomineeAddress> optionalMemberEmploymentRequestNomineeAddress = memberEmploymentRequestNomineeAddressValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestNomineeContactValidator memberEmploymentRequestNomineeContactValidator;
Optional<MemberEmploymentRequestNomineeContact> optionalMemberEmploymentRequestNomineeContact = memberEmploymentRequestNomineeContactValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestServiceRequestValidator memberEmploymentRequestServiceRequestValidator;
Optional<MemberEmploymentRequestServiceRequest> optionalMemberEmploymentRequestServiceRequest = memberEmploymentRequestServiceRequestValidator.validate(requestDto.getId());


@Autowired
private MemberEmploymentRequestStatusHistoryValidator memberEmploymentRequestStatusHistoryValidator;
Optional<MemberEmploymentRequestStatusHistory> optionalMemberEmploymentRequestStatusHistory = memberEmploymentRequestStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private MemberGeneralValidator memberGeneralValidator;
Optional<MemberGeneral> optionalMemberGeneral = memberGeneralValidator.validate(requestDto.getId());


@Autowired
private MemberPersonVerificationRequestValidator memberPersonVerificationRequestValidator;
Optional<MemberPersonVerificationRequest> optionalMemberPersonVerificationRequest = memberPersonVerificationRequestValidator.validate(requestDto.getId());


@Autowired
private MemberPersonVerificationRequestDocumentValidator memberPersonVerificationRequestDocumentValidator;
Optional<MemberPersonVerificationRequestDocument> optionalMemberPersonVerificationRequestDocument = memberPersonVerificationRequestDocumentValidator.validate(requestDto.getId());


@Autowired
private MemberPersonVerificationRequestHoldHistoryValidator memberPersonVerificationRequestHoldHistoryValidator;
Optional<MemberPersonVerificationRequestHoldHistory> optionalMemberPersonVerificationRequestHoldHistory = memberPersonVerificationRequestHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private MemberPersonVerificationRequestMessageValidator memberPersonVerificationRequestMessageValidator;
Optional<MemberPersonVerificationRequestMessage> optionalMemberPersonVerificationRequestMessage = memberPersonVerificationRequestMessageValidator.validate(requestDto.getId());


@Autowired
private MemberPersonVerificationRequestServiceRequestValidator memberPersonVerificationRequestServiceRequestValidator;
Optional<MemberPersonVerificationRequestServiceRequest> optionalMemberPersonVerificationRequestServiceRequest = memberPersonVerificationRequestServiceRequestValidator.validate(requestDto.getId());


@Autowired
private MemberPersonVerificationRequestStatusHistoryValidator memberPersonVerificationRequestStatusHistoryValidator;
Optional<MemberPersonVerificationRequestStatusHistory> optionalMemberPersonVerificationRequestStatusHistory = memberPersonVerificationRequestStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private MessageDeliveredValidator messageDeliveredValidator;
Optional<MessageDelivered> optionalMessageDelivered = messageDeliveredValidator.validate(requestDto.getId());


@Autowired
private MstAvailableBalanceDescriptionValidator mstAvailableBalanceDescriptionValidator;
Optional<MstAvailableBalanceDescription> optionalMstAvailableBalanceDescription = mstAvailableBalanceDescriptionValidator.validate(requestDto.getId());


@Autowired
private MstAvailableBalanceRefundRequestSourceValidator mstAvailableBalanceRefundRequestSourceValidator;
Optional<MstAvailableBalanceRefundRequestSource> optionalMstAvailableBalanceRefundRequestSource = mstAvailableBalanceRefundRequestSourceValidator.validate(requestDto.getId());


@Autowired
private MstAvailableBalanceRefundRequestStatusValidator mstAvailableBalanceRefundRequestStatusValidator;
Optional<MstAvailableBalanceRefundRequestStatus> optionalMstAvailableBalanceRefundRequestStatus = mstAvailableBalanceRefundRequestStatusValidator.validate(requestDto.getId());


@Autowired
private MstAvailableBalanceRefundRequestTypeValidator mstAvailableBalanceRefundRequestTypeValidator;
Optional<MstAvailableBalanceRefundRequestType> optionalMstAvailableBalanceRefundRequestType = mstAvailableBalanceRefundRequestTypeValidator.validate(requestDto.getId());


@Autowired
private MstAwarenessProgramStatusValidator mstAwarenessProgramStatusValidator;
Optional<MstAwarenessProgramStatus> optionalMstAwarenessProgramStatus = mstAwarenessProgramStatusValidator.validate(requestDto.getId());


@Autowired
private MstAwarenessProgramTypeValidator mstAwarenessProgramTypeValidator;
Optional<MstAwarenessProgramType> optionalMstAwarenessProgramType = mstAwarenessProgramTypeValidator.validate(requestDto.getId());


@Autowired
private MstBankValidator mstBankValidator;
Optional<MstBank> optionalMstBank = mstBankValidator.validate(requestDto.getId());


@Autowired
private MstBankBranchValidator mstBankBranchValidator;
Optional<MstBankBranch> optionalMstBankBranch = mstBankBranchValidator.validate(requestDto.getId());


@Autowired
private MstBankStatementReconciliationStatusValidator mstBankStatementReconciliationStatusValidator;
Optional<MstBankStatementReconciliationStatus> optionalMstBankStatementReconciliationStatus = mstBankStatementReconciliationStatusValidator.validate(requestDto.getId());


@Autowired
private MstBankStatementTxnOtherDepositTypeValidator mstBankStatementTxnOtherDepositTypeValidator;
Optional<MstBankStatementTxnOtherDepositType> optionalMstBankStatementTxnOtherDepositType = mstBankStatementTxnOtherDepositTypeValidator.validate(requestDto.getId());


@Autowired
private MstBankStatementTxnOtherWithdrawalTypeValidator mstBankStatementTxnOtherWithdrawalTypeValidator;
Optional<MstBankStatementTxnOtherWithdrawalType> optionalMstBankStatementTxnOtherWithdrawalType = mstBankStatementTxnOtherWithdrawalTypeValidator.validate(requestDto.getId());


@Autowired
private MstBankStatementTxnTypeValidator mstBankStatementTxnTypeValidator;
Optional<MstBankStatementTxnType> optionalMstBankStatementTxnType = mstBankStatementTxnTypeValidator.validate(requestDto.getId());


@Autowired
private MstBatchDepositStatusValidator mstBatchDepositStatusValidator;
Optional<MstBatchDepositStatus> optionalMstBatchDepositStatus = mstBatchDepositStatusValidator.validate(requestDto.getId());


@Autowired
private MstBpmRoleValidator mstBpmRoleValidator;
Optional<MstBpmRole> optionalMstBpmRole = mstBpmRoleValidator.validate(requestDto.getId());


@Autowired
private MstBpmWorkflowValidator mstBpmWorkflowValidator;
Optional<MstBpmWorkflow> optionalMstBpmWorkflow = mstBpmWorkflowValidator.validate(requestDto.getId());


@Autowired
private MstBpmWorkflowHeaderParamValidator mstBpmWorkflowHeaderParamValidator;
Optional<MstBpmWorkflowHeaderParam> optionalMstBpmWorkflowHeaderParam = mstBpmWorkflowHeaderParamValidator.validate(requestDto.getId());


@Autowired
private MstBpmWorkflowMappingValidator mstBpmWorkflowMappingValidator;
Optional<MstBpmWorkflowMapping> optionalMstBpmWorkflowMapping = mstBpmWorkflowMappingValidator.validate(requestDto.getId());


@Autowired
private MstCitySuggestionValidator mstCitySuggestionValidator;
Optional<MstCitySuggestion> optionalMstCitySuggestion = mstCitySuggestionValidator.validate(requestDto.getId());


@Autowired
private MstCivilStatusValidator mstCivilStatusValidator;
Optional<MstCivilStatus> optionalMstCivilStatus = mstCivilStatusValidator.validate(requestDto.getId());


@Autowired
private MstClaimChannelTypeValidator mstClaimChannelTypeValidator;
Optional<MstClaimChannelType> optionalMstClaimChannelType = mstClaimChannelTypeValidator.validate(requestDto.getId());


@Autowired
private MstClaimDeathInsuaranceElegibleDecieseValidator mstClaimDeathInsuaranceElegibleDecieseValidator;
Optional<MstClaimDeathInsuaranceElegibleDeciese> optionalMstClaimDeathInsuaranceElegibleDeciese = mstClaimDeathInsuaranceElegibleDecieseValidator.validate(requestDto.getId());


@Autowired
private MstClaimPreLegibilityDoccumentValidator mstClaimPreLegibilityDoccumentValidator;
Optional<MstClaimPreLegibilityDoccument> optionalMstClaimPreLegibilityDoccument = mstClaimPreLegibilityDoccumentValidator.validate(requestDto.getId());


@Autowired
private MstClaimSourceTypeValidator mstClaimSourceTypeValidator;
Optional<MstClaimSourceType> optionalMstClaimSourceType = mstClaimSourceTypeValidator.validate(requestDto.getId());


@Autowired
private MstClaimStatusValidator mstClaimStatusValidator;
Optional<MstClaimStatus> optionalMstClaimStatus = mstClaimStatusValidator.validate(requestDto.getId());


@Autowired
private MstClaimTypeValidator mstClaimTypeValidator;
Optional<MstClaimType> optionalMstClaimType = mstClaimTypeValidator.validate(requestDto.getId());


@Autowired
private MstCollectionAmendmentStatusValidator mstCollectionAmendmentStatusValidator;
Optional<MstCollectionAmendmentStatus> optionalMstCollectionAmendmentStatus = mstCollectionAmendmentStatusValidator.validate(requestDto.getId());


@Autowired
private MstCollectionAmendmentTypeValidator mstCollectionAmendmentTypeValidator;
Optional<MstCollectionAmendmentType> optionalMstCollectionAmendmentType = mstCollectionAmendmentTypeValidator.validate(requestDto.getId());


@Autowired
private MstCollectionErrorValidator mstCollectionErrorValidator;
Optional<MstCollectionError> optionalMstCollectionError = mstCollectionErrorValidator.validate(requestDto.getId());


@Autowired
private MstCollectionErrorPossibleValidator mstCollectionErrorPossibleValidator;
Optional<MstCollectionErrorPossible> optionalMstCollectionErrorPossible = mstCollectionErrorPossibleValidator.validate(requestDto.getId());


@Autowired
private MstCollectionForValidator mstCollectionForValidator;
Optional<MstCollectionFor> optionalMstCollectionFor = mstCollectionForValidator.validate(requestDto.getId());


@Autowired
private MstCollectionSourceValidator mstCollectionSourceValidator;
Optional<MstCollectionSource> optionalMstCollectionSource = mstCollectionSourceValidator.validate(requestDto.getId());


@Autowired
private MstCollectionStatusValidator mstCollectionStatusValidator;
Optional<MstCollectionStatus> optionalMstCollectionStatus = mstCollectionStatusValidator.validate(requestDto.getId());


@Autowired
private MstCollectionTypeValidator mstCollectionTypeValidator;
Optional<MstCollectionType> optionalMstCollectionType = mstCollectionTypeValidator.validate(requestDto.getId());


@Autowired
private MstConfigurationValidator mstConfigurationValidator;
Optional<MstConfiguration> optionalMstConfiguration = mstConfigurationValidator.validate(requestDto.getId());


@Autowired
private MstContactTypeValidator mstContactTypeValidator;
Optional<MstContactType> optionalMstContactType = mstContactTypeValidator.validate(requestDto.getId());


@Autowired
private MstContactValidationValidator mstContactValidationValidator;
Optional<MstContactValidation> optionalMstContactValidation = mstContactValidationValidator.validate(requestDto.getId());


@Autowired
private MstCountryValidator mstCountryValidator;
Optional<MstCountry> optionalMstCountry = mstCountryValidator.validate(requestDto.getId());


@Autowired
private MstCourtValidator mstCourtValidator;
Optional<MstCourt> optionalMstCourt = mstCourtValidator.validate(requestDto.getId());


@Autowired
private MstCourtDsValidator mstCourtDsValidator;
Optional<MstCourtDs> optionalMstCourtDs = mstCourtDsValidator.validate(requestDto.getId());


@Autowired
private MstCourtTypeValidator mstCourtTypeValidator;
Optional<MstCourtType> optionalMstCourtType = mstCourtTypeValidator.validate(requestDto.getId());


@Autowired
private MstCurrencyValidator mstCurrencyValidator;
Optional<MstCurrency> optionalMstCurrency = mstCurrencyValidator.validate(requestDto.getId());


@Autowired
private MstDesignationSuggestionValidator mstDesignationSuggestionValidator;
Optional<MstDesignationSuggestion> optionalMstDesignationSuggestion = mstDesignationSuggestionValidator.validate(requestDto.getId());


@Autowired
private MstDisbursementSourceValidator mstDisbursementSourceValidator;
Optional<MstDisbursementSource> optionalMstDisbursementSource = mstDisbursementSourceValidator.validate(requestDto.getId());


@Autowired
private MstDisbursementStatusValidator mstDisbursementStatusValidator;
Optional<MstDisbursementStatus> optionalMstDisbursementStatus = mstDisbursementStatusValidator.validate(requestDto.getId());


@Autowired
private MstDistrictValidator mstDistrictValidator;
Optional<MstDistrict> optionalMstDistrict = mstDistrictValidator.validate(requestDto.getId());


@Autowired
private MstDivisionalSecretariatValidator mstDivisionalSecretariatValidator;
Optional<MstDivisionalSecretariat> optionalMstDivisionalSecretariat = mstDivisionalSecretariatValidator.validate(requestDto.getId());


@Autowired
private MstDmuDeliveryTypeValidator mstDmuDeliveryTypeValidator;
Optional<MstDmuDeliveryType> optionalMstDmuDeliveryType = mstDmuDeliveryTypeValidator.validate(requestDto.getId());


@Autowired
private MstDmuInboundDeliveryBatchStatusValidator mstDmuInboundDeliveryBatchStatusValidator;
Optional<MstDmuInboundDeliveryBatchStatus> optionalMstDmuInboundDeliveryBatchStatus = mstDmuInboundDeliveryBatchStatusValidator.validate(requestDto.getId());


@Autowired
private MstDmuInboundStatusValidator mstDmuInboundStatusValidator;
Optional<MstDmuInboundStatus> optionalMstDmuInboundStatus = mstDmuInboundStatusValidator.validate(requestDto.getId());


@Autowired
private MstDmuOutboundDeliveryBatchStatusValidator mstDmuOutboundDeliveryBatchStatusValidator;
Optional<MstDmuOutboundDeliveryBatchStatus> optionalMstDmuOutboundDeliveryBatchStatus = mstDmuOutboundDeliveryBatchStatusValidator.validate(requestDto.getId());


@Autowired
private MstDmuOutboundDeliveryChargeTypeValidator mstDmuOutboundDeliveryChargeTypeValidator;
Optional<MstDmuOutboundDeliveryChargeType> optionalMstDmuOutboundDeliveryChargeType = mstDmuOutboundDeliveryChargeTypeValidator.validate(requestDto.getId());


@Autowired
private MstDmuOutboundDivisionScheduleStatusValidator mstDmuOutboundDivisionScheduleStatusValidator;
Optional<MstDmuOutboundDivisionScheduleStatus> optionalMstDmuOutboundDivisionScheduleStatus = mstDmuOutboundDivisionScheduleStatusValidator.validate(requestDto.getId());


@Autowired
private MstDmuOutboundStatusValidator mstDmuOutboundStatusValidator;
Optional<MstDmuOutboundStatus> optionalMstDmuOutboundStatus = mstDmuOutboundStatusValidator.validate(requestDto.getId());


@Autowired
private MstDmuOwnerDivisionTypeValidator mstDmuOwnerDivisionTypeValidator;
Optional<MstDmuOwnerDivisionType> optionalMstDmuOwnerDivisionType = mstDmuOwnerDivisionTypeValidator.validate(requestDto.getId());


@Autowired
private MstDmuPackingTypeValidator mstDmuPackingTypeValidator;
Optional<MstDmuPackingType> optionalMstDmuPackingType = mstDmuPackingTypeValidator.validate(requestDto.getId());


@Autowired
private MstDocumentTypeValidator mstDocumentTypeValidator;
Optional<MstDocumentType> optionalMstDocumentType = mstDocumentTypeValidator.validate(requestDto.getId());


@Autowired
private MstDocumentTypeModuleValidator mstDocumentTypeModuleValidator;
Optional<MstDocumentTypeModule> optionalMstDocumentTypeModule = mstDocumentTypeModuleValidator.validate(requestDto.getId());


@Autowired
private MstDocumentTypeModuleSbuValidator mstDocumentTypeModuleSbuValidator;
Optional<MstDocumentTypeModuleSbu> optionalMstDocumentTypeModuleSbu = mstDocumentTypeModuleSbuValidator.validate(requestDto.getId());


@Autowired
private MstEmployerBranchStatusValidator mstEmployerBranchStatusValidator;
Optional<MstEmployerBranchStatus> optionalMstEmployerBranchStatus = mstEmployerBranchStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerCreateSourceTypeValidator mstEmployerCreateSourceTypeValidator;
Optional<MstEmployerCreateSourceType> optionalMstEmployerCreateSourceType = mstEmployerCreateSourceTypeValidator.validate(requestDto.getId());


@Autowired
private MstEmployerDueStatusValidator mstEmployerDueStatusValidator;
Optional<MstEmployerDueStatus> optionalMstEmployerDueStatus = mstEmployerDueStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerDueTypeValidator mstEmployerDueTypeValidator;
Optional<MstEmployerDueType> optionalMstEmployerDueType = mstEmployerDueTypeValidator.validate(requestDto.getId());


@Autowired
private MstEmployerEtfbContributionValidator mstEmployerEtfbContributionValidator;
Optional<MstEmployerEtfbContribution> optionalMstEmployerEtfbContribution = mstEmployerEtfbContributionValidator.validate(requestDto.getId());


@Autowired
private MstEmployerIndustryTypeValidator mstEmployerIndustryTypeValidator;
Optional<MstEmployerIndustryType> optionalMstEmployerIndustryType = mstEmployerIndustryTypeValidator.validate(requestDto.getId());


@Autowired
private MstEmployerInterimReferenceTableValidator mstEmployerInterimReferenceTableValidator;
Optional<MstEmployerInterimReferenceTable> optionalMstEmployerInterimReferenceTable = mstEmployerInterimReferenceTableValidator.validate(requestDto.getId());


@Autowired
private MstEmployerMemberAccountBulkResultValidator mstEmployerMemberAccountBulkResultValidator;
Optional<MstEmployerMemberAccountBulkResult> optionalMstEmployerMemberAccountBulkResult = mstEmployerMemberAccountBulkResultValidator.validate(requestDto.getId());


@Autowired
private MstEmployerMemberAccountStatusValidator mstEmployerMemberAccountStatusValidator;
Optional<MstEmployerMemberAccountStatus> optionalMstEmployerMemberAccountStatus = mstEmployerMemberAccountStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerMemberGroupValidator mstEmployerMemberGroupValidator;
Optional<MstEmployerMemberGroup> optionalMstEmployerMemberGroup = mstEmployerMemberGroupValidator.validate(requestDto.getId());


@Autowired
private MstEmployerNatureBusinessValidator mstEmployerNatureBusinessValidator;
Optional<MstEmployerNatureBusiness> optionalMstEmployerNatureBusiness = mstEmployerNatureBusinessValidator.validate(requestDto.getId());


@Autowired
private MstEmployerOrganizationTypeValidator mstEmployerOrganizationTypeValidator;
Optional<MstEmployerOrganizationType> optionalMstEmployerOrganizationType = mstEmployerOrganizationTypeValidator.validate(requestDto.getId());


@Autowired
private MstEmployerPayorderAmendmentSourceValidator mstEmployerPayorderAmendmentSourceValidator;
Optional<MstEmployerPayorderAmendmentSource> optionalMstEmployerPayorderAmendmentSource = mstEmployerPayorderAmendmentSourceValidator.validate(requestDto.getId());


@Autowired
private MstEmployerPayorderAmendmentStatusValidator mstEmployerPayorderAmendmentStatusValidator;
Optional<MstEmployerPayorderAmendmentStatus> optionalMstEmployerPayorderAmendmentStatus = mstEmployerPayorderAmendmentStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerPayorderInstalmentSourceValidator mstEmployerPayorderInstalmentSourceValidator;
Optional<MstEmployerPayorderInstalmentSource> optionalMstEmployerPayorderInstalmentSource = mstEmployerPayorderInstalmentSourceValidator.validate(requestDto.getId());


@Autowired
private MstEmployerPayorderInstalmentStatusValidator mstEmployerPayorderInstalmentStatusValidator;
Optional<MstEmployerPayorderInstalmentStatus> optionalMstEmployerPayorderInstalmentStatus = mstEmployerPayorderInstalmentStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerPayorderStatusValidator mstEmployerPayorderStatusValidator;
Optional<MstEmployerPayorderStatus> optionalMstEmployerPayorderStatus = mstEmployerPayorderStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerReturnPaymentChargeValidator mstEmployerReturnPaymentChargeValidator;
Optional<MstEmployerReturnPaymentCharge> optionalMstEmployerReturnPaymentCharge = mstEmployerReturnPaymentChargeValidator.validate(requestDto.getId());


@Autowired
private MstEmployerRoleValidator mstEmployerRoleValidator;
Optional<MstEmployerRole> optionalMstEmployerRole = mstEmployerRoleValidator.validate(requestDto.getId());


@Autowired
private MstEmployerRolePermissionValidator mstEmployerRolePermissionValidator;
Optional<MstEmployerRolePermission> optionalMstEmployerRolePermission = mstEmployerRolePermissionValidator.validate(requestDto.getId());


@Autowired
private MstEmployerScheduleVisitStatusValidator mstEmployerScheduleVisitStatusValidator;
Optional<MstEmployerScheduleVisitStatus> optionalMstEmployerScheduleVisitStatus = mstEmployerScheduleVisitStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerScheduleVisitTypeValidator mstEmployerScheduleVisitTypeValidator;
Optional<MstEmployerScheduleVisitType> optionalMstEmployerScheduleVisitType = mstEmployerScheduleVisitTypeValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSelfEmploymentPaymentStatusValidator mstEmployerSelfEmploymentPaymentStatusValidator;
Optional<MstEmployerSelfEmploymentPaymentStatus> optionalMstEmployerSelfEmploymentPaymentStatus = mstEmployerSelfEmploymentPaymentStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerStatusValidator mstEmployerStatusValidator;
Optional<MstEmployerStatus> optionalMstEmployerStatus = mstEmployerStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargeNoticeAmendmentSourceValidator mstEmployerSurchargeNoticeAmendmentSourceValidator;
Optional<MstEmployerSurchargeNoticeAmendmentSource> optionalMstEmployerSurchargeNoticeAmendmentSource = mstEmployerSurchargeNoticeAmendmentSourceValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargeNoticeAmendmentStatusValidator mstEmployerSurchargeNoticeAmendmentStatusValidator;
Optional<MstEmployerSurchargeNoticeAmendmentStatus> optionalMstEmployerSurchargeNoticeAmendmentStatus = mstEmployerSurchargeNoticeAmendmentStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargeNoticeInstalmentSourceValidator mstEmployerSurchargeNoticeInstalmentSourceValidator;
Optional<MstEmployerSurchargeNoticeInstalmentSource> optionalMstEmployerSurchargeNoticeInstalmentSource = mstEmployerSurchargeNoticeInstalmentSourceValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargeNoticeInstalmentStatusValidator mstEmployerSurchargeNoticeInstalmentStatusValidator;
Optional<MstEmployerSurchargeNoticeInstalmentStatus> optionalMstEmployerSurchargeNoticeInstalmentStatus = mstEmployerSurchargeNoticeInstalmentStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargeNoticeStatusValidator mstEmployerSurchargeNoticeStatusValidator;
Optional<MstEmployerSurchargeNoticeStatus> optionalMstEmployerSurchargeNoticeStatus = mstEmployerSurchargeNoticeStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargePercentageValidator mstEmployerSurchargePercentageValidator;
Optional<MstEmployerSurchargePercentage> optionalMstEmployerSurchargePercentage = mstEmployerSurchargePercentageValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargeStatusValidator mstEmployerSurchargeStatusValidator;
Optional<MstEmployerSurchargeStatus> optionalMstEmployerSurchargeStatus = mstEmployerSurchargeStatusValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargeWithdrawReasonValidator mstEmployerSurchargeWithdrawReasonValidator;
Optional<MstEmployerSurchargeWithdrawReason> optionalMstEmployerSurchargeWithdrawReason = mstEmployerSurchargeWithdrawReasonValidator.validate(requestDto.getId());


@Autowired
private MstEmployerSurchargeWithdrawSubReasonValidator mstEmployerSurchargeWithdrawSubReasonValidator;
Optional<MstEmployerSurchargeWithdrawSubReason> optionalMstEmployerSurchargeWithdrawSubReason = mstEmployerSurchargeWithdrawSubReasonValidator.validate(requestDto.getId());


@Autowired
private MstEmployerTypeValidator mstEmployerTypeValidator;
Optional<MstEmployerType> optionalMstEmployerType = mstEmployerTypeValidator.validate(requestDto.getId());


@Autowired
private MstEmployerVerificationRequestSourceTypeValidator mstEmployerVerificationRequestSourceTypeValidator;
Optional<MstEmployerVerificationRequestSourceType> optionalMstEmployerVerificationRequestSourceType = mstEmployerVerificationRequestSourceTypeValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementCallindirectiveStatusValidator mstEnforcementCallindirectiveStatusValidator;
Optional<MstEnforcementCallindirectiveStatus> optionalMstEnforcementCallindirectiveStatus = mstEnforcementCallindirectiveStatusValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementDefaulterStatusValidator mstEnforcementDefaulterStatusValidator;
Optional<MstEnforcementDefaulterStatus> optionalMstEnforcementDefaulterStatus = mstEnforcementDefaulterStatusValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementEmployerInspectionTypeValidator mstEnforcementEmployerInspectionTypeValidator;
Optional<MstEnforcementEmployerInspectionType> optionalMstEnforcementEmployerInspectionType = mstEnforcementEmployerInspectionTypeValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementEmployerPerformanceValidator mstEnforcementEmployerPerformanceValidator;
Optional<MstEnforcementEmployerPerformance> optionalMstEnforcementEmployerPerformance = mstEnforcementEmployerPerformanceValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementEmployerSourceValidator mstEnforcementEmployerSourceValidator;
Optional<MstEnforcementEmployerSource> optionalMstEnforcementEmployerSource = mstEnforcementEmployerSourceValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementEmployerStatusValidator mstEnforcementEmployerStatusValidator;
Optional<MstEnforcementEmployerStatus> optionalMstEnforcementEmployerStatus = mstEnforcementEmployerStatusValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementInspectionReportStatusValidator mstEnforcementInspectionReportStatusValidator;
Optional<MstEnforcementInspectionReportStatus> optionalMstEnforcementInspectionReportStatus = mstEnforcementInspectionReportStatusValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementInspectionResolutionTypeValidator mstEnforcementInspectionResolutionTypeValidator;
Optional<MstEnforcementInspectionResolutionType> optionalMstEnforcementInspectionResolutionType = mstEnforcementInspectionResolutionTypeValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementLegalCheckListValidator mstEnforcementLegalCheckListValidator;
Optional<MstEnforcementLegalCheckList> optionalMstEnforcementLegalCheckList = mstEnforcementLegalCheckListValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementLegalCheckListItemValidator mstEnforcementLegalCheckListItemValidator;
Optional<MstEnforcementLegalCheckListItem> optionalMstEnforcementLegalCheckListItem = mstEnforcementLegalCheckListItemValidator.validate(requestDto.getId());


@Autowired
private MstEnforcementScheduleStatusValidator mstEnforcementScheduleStatusValidator;
Optional<MstEnforcementScheduleStatus> optionalMstEnforcementScheduleStatus = mstEnforcementScheduleStatusValidator.validate(requestDto.getId());


@Autowired
private MstEtfbZoneValidator mstEtfbZoneValidator;
Optional<MstEtfbZone> optionalMstEtfbZone = mstEtfbZoneValidator.validate(requestDto.getId());


@Autowired
private MstEtfbZoneDistrictValidator mstEtfbZoneDistrictValidator;
Optional<MstEtfbZoneDistrict> optionalMstEtfbZoneDistrict = mstEtfbZoneDistrictValidator.validate(requestDto.getId());


@Autowired
private MstExchangeRateValidator mstExchangeRateValidator;
Optional<MstExchangeRate> optionalMstExchangeRate = mstExchangeRateValidator.validate(requestDto.getId());


@Autowired
private MstGramaNiladhariDivisionValidator mstGramaNiladhariDivisionValidator;
Optional<MstGramaNiladhariDivision> optionalMstGramaNiladhariDivision = mstGramaNiladhariDivisionValidator.validate(requestDto.getId());


@Autowired
private MstIdentityValidator mstIdentityValidator;
Optional<MstIdentity> optionalMstIdentity = mstIdentityValidator.validate(requestDto.getId());


@Autowired
private MstIdentityNicTypeValidator mstIdentityNicTypeValidator;
Optional<MstIdentityNicType> optionalMstIdentityNicType = mstIdentityNicTypeValidator.validate(requestDto.getId());


@Autowired
private MstIncompleteMemberMasterDataCheckListValidator mstIncompleteMemberMasterDataCheckListValidator;
Optional<MstIncompleteMemberMasterDataCheckList> optionalMstIncompleteMemberMasterDataCheckList = mstIncompleteMemberMasterDataCheckListValidator.validate(requestDto.getId());


@Autowired
private MstIncompleteMemberMasterDataResolutionValidator mstIncompleteMemberMasterDataResolutionValidator;
Optional<MstIncompleteMemberMasterDataResolution> optionalMstIncompleteMemberMasterDataResolution = mstIncompleteMemberMasterDataResolutionValidator.validate(requestDto.getId());


@Autowired
private MstIncompleteMemberMasterDataSourceValidator mstIncompleteMemberMasterDataSourceValidator;
Optional<MstIncompleteMemberMasterDataSource> optionalMstIncompleteMemberMasterDataSource = mstIncompleteMemberMasterDataSourceValidator.validate(requestDto.getId());


@Autowired
private MstIncompleteMemberMasterDataStatusValidator mstIncompleteMemberMasterDataStatusValidator;
Optional<MstIncompleteMemberMasterDataStatus> optionalMstIncompleteMemberMasterDataStatus = mstIncompleteMemberMasterDataStatusValidator.validate(requestDto.getId());


@Autowired
private MstIntCalcAmicAmsStatusValidator mstIntCalcAmicAmsStatusValidator;
Optional<MstIntCalcAmicAmsStatus> optionalMstIntCalcAmicAmsStatus = mstIntCalcAmicAmsStatusValidator.validate(requestDto.getId());


@Autowired
private MstIntCalcAmicStatusValidator mstIntCalcAmicStatusValidator;
Optional<MstIntCalcAmicStatus> optionalMstIntCalcAmicStatus = mstIntCalcAmicStatusValidator.validate(requestDto.getId());


@Autowired
private MstIntCalcFmicStatusValidator mstIntCalcFmicStatusValidator;
Optional<MstIntCalcFmicStatus> optionalMstIntCalcFmicStatus = mstIntCalcFmicStatusValidator.validate(requestDto.getId());


@Autowired
private MstIntCalcRmicStatusValidator mstIntCalcRmicStatusValidator;
Optional<MstIntCalcRmicStatus> optionalMstIntCalcRmicStatus = mstIntCalcRmicStatusValidator.validate(requestDto.getId());


@Autowired
private MstIntCalcSourceValidator mstIntCalcSourceValidator;
Optional<MstIntCalcSource> optionalMstIntCalcSource = mstIntCalcSourceValidator.validate(requestDto.getId());


@Autowired
private MstInterestPercentageValidator mstInterestPercentageValidator;
Optional<MstInterestPercentage> optionalMstInterestPercentage = mstInterestPercentageValidator.validate(requestDto.getId());


@Autowired
private MstLanguageValidator mstLanguageValidator;
Optional<MstLanguage> optionalMstLanguage = mstLanguageValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseActionValidator mstLegalCaseActionValidator;
Optional<MstLegalCaseAction> optionalMstLegalCaseAction = mstLegalCaseActionValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseCategoryValidator mstLegalCaseCategoryValidator;
Optional<MstLegalCaseCategory> optionalMstLegalCaseCategory = mstLegalCaseCategoryValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseDocumentSystemUpdateTypeValidator mstLegalCaseDocumentSystemUpdateTypeValidator;
Optional<MstLegalCaseDocumentSystemUpdateType> optionalMstLegalCaseDocumentSystemUpdateType = mstLegalCaseDocumentSystemUpdateTypeValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseEventTypeValidator mstLegalCaseEventTypeValidator;
Optional<MstLegalCaseEventType> optionalMstLegalCaseEventType = mstLegalCaseEventTypeValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseOverpaymentRefundRequestStatusValidator mstLegalCaseOverpaymentRefundRequestStatusValidator;
Optional<MstLegalCaseOverpaymentRefundRequestStatus> optionalMstLegalCaseOverpaymentRefundRequestStatus = mstLegalCaseOverpaymentRefundRequestStatusValidator.validate(requestDto.getId());


@Autowired
private MstLegalCasePaymentInfoTypeValidator mstLegalCasePaymentInfoTypeValidator;
Optional<MstLegalCasePaymentInfoType> optionalMstLegalCasePaymentInfoType = mstLegalCasePaymentInfoTypeValidator.validate(requestDto.getId());


@Autowired
private MstLegalCasePlaintiffRespondentTypeValidator mstLegalCasePlaintiffRespondentTypeValidator;
Optional<MstLegalCasePlaintiffRespondentType> optionalMstLegalCasePlaintiffRespondentType = mstLegalCasePlaintiffRespondentTypeValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseSourceTypeValidator mstLegalCaseSourceTypeValidator;
Optional<MstLegalCaseSourceType> optionalMstLegalCaseSourceType = mstLegalCaseSourceTypeValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseStageValidator mstLegalCaseStageValidator;
Optional<MstLegalCaseStage> optionalMstLegalCaseStage = mstLegalCaseStageValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseStatusValidator mstLegalCaseStatusValidator;
Optional<MstLegalCaseStatus> optionalMstLegalCaseStatus = mstLegalCaseStatusValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseSubActionValidator mstLegalCaseSubActionValidator;
Optional<MstLegalCaseSubAction> optionalMstLegalCaseSubAction = mstLegalCaseSubActionValidator.validate(requestDto.getId());


@Autowired
private MstLegalCaseSubStageValidator mstLegalCaseSubStageValidator;
Optional<MstLegalCaseSubStage> optionalMstLegalCaseSubStage = mstLegalCaseSubStageValidator.validate(requestDto.getId());


@Autowired
private MstLegalDocumentCourtValidator mstLegalDocumentCourtValidator;
Optional<MstLegalDocumentCourt> optionalMstLegalDocumentCourt = mstLegalDocumentCourtValidator.validate(requestDto.getId());


@Autowired
private MstLegalEtfbOrganizationValidator mstLegalEtfbOrganizationValidator;
Optional<MstLegalEtfbOrganization> optionalMstLegalEtfbOrganization = mstLegalEtfbOrganizationValidator.validate(requestDto.getId());


@Autowired
private MstLegalSystemDocumentStatusValidator mstLegalSystemDocumentStatusValidator;
Optional<MstLegalSystemDocumentStatus> optionalMstLegalSystemDocumentStatus = mstLegalSystemDocumentStatusValidator.validate(requestDto.getId());


@Autowired
private MstLocalGovernmentAuthorityValidator mstLocalGovernmentAuthorityValidator;
Optional<MstLocalGovernmentAuthority> optionalMstLocalGovernmentAuthority = mstLocalGovernmentAuthorityValidator.validate(requestDto.getId());


@Autowired
private MstLocalGovernmentAuthorityTypeValidator mstLocalGovernmentAuthorityTypeValidator;
Optional<MstLocalGovernmentAuthorityType> optionalMstLocalGovernmentAuthorityType = mstLocalGovernmentAuthorityTypeValidator.validate(requestDto.getId());


@Autowired
private MstMemberAccountAllocationStatusValidator mstMemberAccountAllocationStatusValidator;
Optional<MstMemberAccountAllocationStatus> optionalMstMemberAccountAllocationStatus = mstMemberAccountAllocationStatusValidator.validate(requestDto.getId());


@Autowired
private MstMemberAccountStatusValidator mstMemberAccountStatusValidator;
Optional<MstMemberAccountStatus> optionalMstMemberAccountStatus = mstMemberAccountStatusValidator.validate(requestDto.getId());


@Autowired
private MstMemberAccountTypeValidator mstMemberAccountTypeValidator;
Optional<MstMemberAccountType> optionalMstMemberAccountType = mstMemberAccountTypeValidator.validate(requestDto.getId());


@Autowired
private MstMemberCreatedSourceValidator mstMemberCreatedSourceValidator;
Optional<MstMemberCreatedSource> optionalMstMemberCreatedSource = mstMemberCreatedSourceValidator.validate(requestDto.getId());


@Autowired
private MstMemberEmploymentRequestSourceValidator mstMemberEmploymentRequestSourceValidator;
Optional<MstMemberEmploymentRequestSource> optionalMstMemberEmploymentRequestSource = mstMemberEmploymentRequestSourceValidator.validate(requestDto.getId());


@Autowired
private MstMemberEmploymentRequestStatusValidator mstMemberEmploymentRequestStatusValidator;
Optional<MstMemberEmploymentRequestStatus> optionalMstMemberEmploymentRequestStatus = mstMemberEmploymentRequestStatusValidator.validate(requestDto.getId());


@Autowired
private MstMemberNewEmploymentResolutionValidator mstMemberNewEmploymentResolutionValidator;
Optional<MstMemberNewEmploymentResolution> optionalMstMemberNewEmploymentResolution = mstMemberNewEmploymentResolutionValidator.validate(requestDto.getId());


@Autowired
private MstMemberPersonVerificationRequestSourceValidator mstMemberPersonVerificationRequestSourceValidator;
Optional<MstMemberPersonVerificationRequestSource> optionalMstMemberPersonVerificationRequestSource = mstMemberPersonVerificationRequestSourceValidator.validate(requestDto.getId());


@Autowired
private MstMemberPersonVerificationRequestTypeValidator mstMemberPersonVerificationRequestTypeValidator;
Optional<MstMemberPersonVerificationRequestType> optionalMstMemberPersonVerificationRequestType = mstMemberPersonVerificationRequestTypeValidator.validate(requestDto.getId());


@Autowired
private MstMessageCodeValidator mstMessageCodeValidator;
Optional<MstMessageCode> optionalMstMessageCode = mstMessageCodeValidator.validate(requestDto.getId());


@Autowired
private MstMessageContactTypeValidator mstMessageContactTypeValidator;
Optional<MstMessageContactType> optionalMstMessageContactType = mstMessageContactTypeValidator.validate(requestDto.getId());


@Autowired
private MstMetaRoleValidator mstMetaRoleValidator;
Optional<MstMetaRole> optionalMstMetaRole = mstMetaRoleValidator.validate(requestDto.getId());


@Autowired
private MstMetaRolePermissionValidator mstMetaRolePermissionValidator;
Optional<MstMetaRolePermission> optionalMstMetaRolePermission = mstMetaRolePermissionValidator.validate(requestDto.getId());


@Autowired
private MstModuleValidator mstModuleValidator;
Optional<MstModule> optionalMstModule = mstModuleValidator.validate(requestDto.getId());


@Autowired
private MstOrganizationCategoryValidator mstOrganizationCategoryValidator;
Optional<MstOrganizationCategory> optionalMstOrganizationCategory = mstOrganizationCategoryValidator.validate(requestDto.getId());


@Autowired
private MstOrganizationDesignationValidator mstOrganizationDesignationValidator;
Optional<MstOrganizationDesignation> optionalMstOrganizationDesignation = mstOrganizationDesignationValidator.validate(requestDto.getId());


@Autowired
private MstOrganizationMetaRoleValidator mstOrganizationMetaRoleValidator;
Optional<MstOrganizationMetaRole> optionalMstOrganizationMetaRole = mstOrganizationMetaRoleValidator.validate(requestDto.getId());


@Autowired
private MstOrganizationRoleValidator mstOrganizationRoleValidator;
Optional<MstOrganizationRole> optionalMstOrganizationRole = mstOrganizationRoleValidator.validate(requestDto.getId());


@Autowired
private MstOrganizationStatusValidator mstOrganizationStatusValidator;
Optional<MstOrganizationStatus> optionalMstOrganizationStatus = mstOrganizationStatusValidator.validate(requestDto.getId());


@Autowired
private MstOtherAccountTypeValidator mstOtherAccountTypeValidator;
Optional<MstOtherAccountType> optionalMstOtherAccountType = mstOtherAccountTypeValidator.validate(requestDto.getId());


@Autowired
private MstOtpCodeValidator mstOtpCodeValidator;
Optional<MstOtpCode> optionalMstOtpCode = mstOtpCodeValidator.validate(requestDto.getId());


@Autowired
private MstPaymentCollectionAgentStatusValidator mstPaymentCollectionAgentStatusValidator;
Optional<MstPaymentCollectionAgentStatus> optionalMstPaymentCollectionAgentStatus = mstPaymentCollectionAgentStatusValidator.validate(requestDto.getId());


@Autowired
private MstPaymentReferenceNoTypeValidator mstPaymentReferenceNoTypeValidator;
Optional<MstPaymentReferenceNoType> optionalMstPaymentReferenceNoType = mstPaymentReferenceNoTypeValidator.validate(requestDto.getId());


@Autowired
private MstPaymentStatusValidator mstPaymentStatusValidator;
Optional<MstPaymentStatus> optionalMstPaymentStatus = mstPaymentStatusValidator.validate(requestDto.getId());


@Autowired
private MstPaymentTypeValidator mstPaymentTypeValidator;
Optional<MstPaymentType> optionalMstPaymentType = mstPaymentTypeValidator.validate(requestDto.getId());


@Autowired
private MstPaymentTypeCollectionSourceValidator mstPaymentTypeCollectionSourceValidator;
Optional<MstPaymentTypeCollectionSource> optionalMstPaymentTypeCollectionSource = mstPaymentTypeCollectionSourceValidator.validate(requestDto.getId());


@Autowired
private MstPermissionValidator mstPermissionValidator;
Optional<MstPermission> optionalMstPermission = mstPermissionValidator.validate(requestDto.getId());


@Autowired
private MstPersonGeneralReferenceTableValidator mstPersonGeneralReferenceTableValidator;
Optional<MstPersonGeneralReferenceTable> optionalMstPersonGeneralReferenceTable = mstPersonGeneralReferenceTableValidator.validate(requestDto.getId());


@Autowired
private MstPersonReferenceTableValidator mstPersonReferenceTableValidator;
Optional<MstPersonReferenceTable> optionalMstPersonReferenceTable = mstPersonReferenceTableValidator.validate(requestDto.getId());


@Autowired
private MstPersonStatusValidator mstPersonStatusValidator;
Optional<MstPersonStatus> optionalMstPersonStatus = mstPersonStatusValidator.validate(requestDto.getId());


@Autowired
private MstPoliceStationValidator mstPoliceStationValidator;
Optional<MstPoliceStation> optionalMstPoliceStation = mstPoliceStationValidator.validate(requestDto.getId());


@Autowired
private MstPostOfficeValidator mstPostOfficeValidator;
Optional<MstPostOffice> optionalMstPostOffice = mstPostOfficeValidator.validate(requestDto.getId());


@Autowired
private MstPriorityValidator mstPriorityValidator;
Optional<MstPriority> optionalMstPriority = mstPriorityValidator.validate(requestDto.getId());


@Autowired
private MstProvinceValidator mstProvinceValidator;
Optional<MstProvince> optionalMstProvince = mstProvinceValidator.validate(requestDto.getId());


@Autowired
private MstReasonValidator mstReasonValidator;
Optional<MstReason> optionalMstReason = mstReasonValidator.validate(requestDto.getId());


@Autowired
private MstRelationshipValidator mstRelationshipValidator;
Optional<MstRelationship> optionalMstRelationship = mstRelationshipValidator.validate(requestDto.getId());


@Autowired
private MstRoleValidator mstRoleValidator;
Optional<MstRole> optionalMstRole = mstRoleValidator.validate(requestDto.getId());


@Autowired
private MstRoleBpmRoleValidator mstRoleBpmRoleValidator;
Optional<MstRoleBpmRole> optionalMstRoleBpmRole = mstRoleBpmRoleValidator.validate(requestDto.getId());


@Autowired
private MstRolePermissionValidator mstRolePermissionValidator;
Optional<MstRolePermission> optionalMstRolePermission = mstRolePermissionValidator.validate(requestDto.getId());


@Autowired
private MstSbuValidator mstSbuValidator;
Optional<MstSbu> optionalMstSbu = mstSbuValidator.validate(requestDto.getId());


@Autowired
private MstSelfEmploymentAgentMemberStatusValidator mstSelfEmploymentAgentMemberStatusValidator;
Optional<MstSelfEmploymentAgentMemberStatus> optionalMstSelfEmploymentAgentMemberStatus = mstSelfEmploymentAgentMemberStatusValidator.validate(requestDto.getId());


@Autowired
private MstSelfEmploymentAgentStatusValidator mstSelfEmploymentAgentStatusValidator;
Optional<MstSelfEmploymentAgentStatus> optionalMstSelfEmploymentAgentStatus = mstSelfEmploymentAgentStatusValidator.validate(requestDto.getId());


@Autowired
private MstSelfEmploymentCategoryValidator mstSelfEmploymentCategoryValidator;
Optional<MstSelfEmploymentCategory> optionalMstSelfEmploymentCategory = mstSelfEmploymentCategoryValidator.validate(requestDto.getId());


@Autowired
private MstSelfEmploymentCategoryNatureValidator mstSelfEmploymentCategoryNatureValidator;
Optional<MstSelfEmploymentCategoryNature> optionalMstSelfEmploymentCategoryNature = mstSelfEmploymentCategoryNatureValidator.validate(requestDto.getId());


@Autowired
private MstSelfEmploymentPreRegistraionStatusValidator mstSelfEmploymentPreRegistraionStatusValidator;
Optional<MstSelfEmploymentPreRegistraionStatus> optionalMstSelfEmploymentPreRegistraionStatus = mstSelfEmploymentPreRegistraionStatusValidator.validate(requestDto.getId());


@Autowired
private MstSelfEmploymentRegistrationSourceValidator mstSelfEmploymentRegistrationSourceValidator;
Optional<MstSelfEmploymentRegistrationSource> optionalMstSelfEmploymentRegistrationSource = mstSelfEmploymentRegistrationSourceValidator.validate(requestDto.getId());


@Autowired
private MstSelfEmploymentStatusValidator mstSelfEmploymentStatusValidator;
Optional<MstSelfEmploymentStatus> optionalMstSelfEmploymentStatus = mstSelfEmploymentStatusValidator.validate(requestDto.getId());


@Autowired
private MstServiceCounterInquiryTypeValidator mstServiceCounterInquiryTypeValidator;
Optional<MstServiceCounterInquiryType> optionalMstServiceCounterInquiryType = mstServiceCounterInquiryTypeValidator.validate(requestDto.getId());


@Autowired
private MstServiceCounterRequirementTypeValidator mstServiceCounterRequirementTypeValidator;
Optional<MstServiceCounterRequirementType> optionalMstServiceCounterRequirementType = mstServiceCounterRequirementTypeValidator.validate(requestDto.getId());


@Autowired
private MstServiceCounterResolutionActionValidator mstServiceCounterResolutionActionValidator;
Optional<MstServiceCounterResolutionAction> optionalMstServiceCounterResolutionAction = mstServiceCounterResolutionActionValidator.validate(requestDto.getId());


@Autowired
private MstServiceCounterResolutionTypeValidator mstServiceCounterResolutionTypeValidator;
Optional<MstServiceCounterResolutionType> optionalMstServiceCounterResolutionType = mstServiceCounterResolutionTypeValidator.validate(requestDto.getId());


@Autowired
private MstServiceCounterStatusValidator mstServiceCounterStatusValidator;
Optional<MstServiceCounterStatus> optionalMstServiceCounterStatus = mstServiceCounterStatusValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestCollectionAmendmentRequestResolutionValidator mstServiceRequestCollectionAmendmentRequestResolutionValidator;
Optional<MstServiceRequestCollectionAmendmentRequestResolution> optionalMstServiceRequestCollectionAmendmentRequestResolution = mstServiceRequestCollectionAmendmentRequestResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestCollectionAmendmentResolutionValidator mstServiceRequestCollectionAmendmentResolutionValidator;
Optional<MstServiceRequestCollectionAmendmentResolution> optionalMstServiceRequestCollectionAmendmentResolution = mstServiceRequestCollectionAmendmentResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestCollectionErrorResolutionValidator mstServiceRequestCollectionErrorResolutionValidator;
Optional<MstServiceRequestCollectionErrorResolution> optionalMstServiceRequestCollectionErrorResolution = mstServiceRequestCollectionErrorResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestEmployerUpdateResolutionValidator mstServiceRequestEmployerUpdateResolutionValidator;
Optional<MstServiceRequestEmployerUpdateResolution> optionalMstServiceRequestEmployerUpdateResolution = mstServiceRequestEmployerUpdateResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestEnforcementResolutionValidator mstServiceRequestEnforcementResolutionValidator;
Optional<MstServiceRequestEnforcementResolution> optionalMstServiceRequestEnforcementResolution = mstServiceRequestEnforcementResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestFraudulentInvestigationResolutionValidator mstServiceRequestFraudulentInvestigationResolutionValidator;
Optional<MstServiceRequestFraudulentInvestigationResolution> optionalMstServiceRequestFraudulentInvestigationResolution = mstServiceRequestFraudulentInvestigationResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestSourceValidator mstServiceRequestSourceValidator;
Optional<MstServiceRequestSource> optionalMstServiceRequestSource = mstServiceRequestSourceValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestStatusValidator mstServiceRequestStatusValidator;
Optional<MstServiceRequestStatus> optionalMstServiceRequestStatus = mstServiceRequestStatusValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestTypeValidator mstServiceRequestTypeValidator;
Optional<MstServiceRequestType> optionalMstServiceRequestType = mstServiceRequestTypeValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestUpdateEmploymentResolutionValidator mstServiceRequestUpdateEmploymentResolutionValidator;
Optional<MstServiceRequestUpdateEmploymentResolution> optionalMstServiceRequestUpdateEmploymentResolution = mstServiceRequestUpdateEmploymentResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestUpdatePersonMasterDataResolutionValidator mstServiceRequestUpdatePersonMasterDataResolutionValidator;
Optional<MstServiceRequestUpdatePersonMasterDataResolution> optionalMstServiceRequestUpdatePersonMasterDataResolution = mstServiceRequestUpdatePersonMasterDataResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestUpdateSelfEmploymentAgentResolutionValidator mstServiceRequestUpdateSelfEmploymentAgentResolutionValidator;
Optional<MstServiceRequestUpdateSelfEmploymentAgentResolution> optionalMstServiceRequestUpdateSelfEmploymentAgentResolution = mstServiceRequestUpdateSelfEmploymentAgentResolutionValidator.validate(requestDto.getId());


@Autowired
private MstServiceRequestUpdateSelfEmploymentResolutionValidator mstServiceRequestUpdateSelfEmploymentResolutionValidator;
Optional<MstServiceRequestUpdateSelfEmploymentResolution> optionalMstServiceRequestUpdateSelfEmploymentResolution = mstServiceRequestUpdateSelfEmploymentResolutionValidator.validate(requestDto.getId());


@Autowired
private MstSuspenseAccountTypeValidator mstSuspenseAccountTypeValidator;
Optional<MstSuspenseAccountType> optionalMstSuspenseAccountType = mstSuspenseAccountTypeValidator.validate(requestDto.getId());


@Autowired
private MstTitleValidator mstTitleValidator;
Optional<MstTitle> optionalMstTitle = mstTitleValidator.validate(requestDto.getId());


@Autowired
private MstTxnActionValidator mstTxnActionValidator;
Optional<MstTxnAction> optionalMstTxnAction = mstTxnActionValidator.validate(requestDto.getId());


@Autowired
private MstUserCategoryValidator mstUserCategoryValidator;
Optional<MstUserCategory> optionalMstUserCategory = mstUserCategoryValidator.validate(requestDto.getId());


@Autowired
private MstVerificationMethodValidator mstVerificationMethodValidator;
Optional<MstVerificationMethod> optionalMstVerificationMethod = mstVerificationMethodValidator.validate(requestDto.getId());


@Autowired
private MstVerificationRequestStatusValidator mstVerificationRequestStatusValidator;
Optional<MstVerificationRequestStatus> optionalMstVerificationRequestStatus = mstVerificationRequestStatusValidator.validate(requestDto.getId());


@Autowired
private MstVerificationStatusValidator mstVerificationStatusValidator;
Optional<MstVerificationStatus> optionalMstVerificationStatus = mstVerificationStatusValidator.validate(requestDto.getId());


@Autowired
private NotificationValidator notificationValidator;
Optional<Notification> optionalNotification = notificationValidator.validate(requestDto.getId());


@Autowired
private NotRequiredLegalCaseEmployerPaymentValidator notRequiredLegalCaseEmployerPaymentValidator;
Optional<NotRequiredLegalCaseEmployerPayment> optionalNotRequiredLegalCaseEmployerPayment = notRequiredLegalCaseEmployerPaymentValidator.validate(requestDto.getId());


@Autowired
private NotRequiredSelfEmploymentAgentR4Validator notRequiredSelfEmploymentAgentR4Validator;
Optional<NotRequiredSelfEmploymentAgentR4> optionalNotRequiredSelfEmploymentAgentR4 = notRequiredSelfEmploymentAgentR4Validator.validate(requestDto.getId());


@Autowired
private NotRequiredSelfEmploymentAgentR4DetailValidator notRequiredSelfEmploymentAgentR4DetailValidator;
Optional<NotRequiredSelfEmploymentAgentR4Detail> optionalNotRequiredSelfEmploymentAgentR4Detail = notRequiredSelfEmploymentAgentR4DetailValidator.validate(requestDto.getId());


@Autowired
private NotRequiredSelfEmploymentCertificateValidator notRequiredSelfEmploymentCertificateValidator;
Optional<NotRequiredSelfEmploymentCertificate> optionalNotRequiredSelfEmploymentCertificate = notRequiredSelfEmploymentCertificateValidator.validate(requestDto.getId());


@Autowired
private NotRequiredServiceRequestCollectionErrorLegalValidator notRequiredServiceRequestCollectionErrorLegalValidator;
Optional<NotRequiredServiceRequestCollectionErrorLegal> optionalNotRequiredServiceRequestCollectionErrorLegal = notRequiredServiceRequestCollectionErrorLegalValidator.validate(requestDto.getId());


@Autowired
private NotRequiredServiceRequestCollectionErrorLegalRejectValidator notRequiredServiceRequestCollectionErrorLegalRejectValidator;
Optional<NotRequiredServiceRequestCollectionErrorLegalReject> optionalNotRequiredServiceRequestCollectionErrorLegalReject = notRequiredServiceRequestCollectionErrorLegalRejectValidator.validate(requestDto.getId());


@Autowired
private OrganizationValidator organizationValidator;
Optional<Organization> optionalOrganization = organizationValidator.validate(requestDto.getId());


@Autowired
private OrganizationContactValidator organizationContactValidator;
Optional<OrganizationContact> optionalOrganizationContact = organizationContactValidator.validate(requestDto.getId());


@Autowired
private OrganizationEtfbZoneValidator organizationEtfbZoneValidator;
Optional<OrganizationEtfbZone> optionalOrganizationEtfbZone = organizationEtfbZoneValidator.validate(requestDto.getId());


@Autowired
private OrganizationStatusHistoryValidator organizationStatusHistoryValidator;
Optional<OrganizationStatusHistory> optionalOrganizationStatusHistory = organizationStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private OrganizationUserValidator organizationUserValidator;
Optional<OrganizationUser> optionalOrganizationUser = organizationUserValidator.validate(requestDto.getId());


@Autowired
private OrganizationUserAccessOrganizationValidator organizationUserAccessOrganizationValidator;
Optional<OrganizationUserAccessOrganization> optionalOrganizationUserAccessOrganization = organizationUserAccessOrganizationValidator.validate(requestDto.getId());


@Autowired
private OrganizationUserHistoryValidator organizationUserHistoryValidator;
Optional<OrganizationUserHistory> optionalOrganizationUserHistory = organizationUserHistoryValidator.validate(requestDto.getId());


@Autowired
private OrganizationUserRoleValidator organizationUserRoleValidator;
Optional<OrganizationUserRole> optionalOrganizationUserRole = organizationUserRoleValidator.validate(requestDto.getId());


@Autowired
private OtpGeneratedValidator otpGeneratedValidator;
Optional<OtpGenerated> optionalOtpGenerated = otpGeneratedValidator.validate(requestDto.getId());


@Autowired
private PaymentCollectionAgentValidator paymentCollectionAgentValidator;
Optional<PaymentCollectionAgent> optionalPaymentCollectionAgent = paymentCollectionAgentValidator.validate(requestDto.getId());


@Autowired
private PaymentCollectionAgentAddressValidator paymentCollectionAgentAddressValidator;
Optional<PaymentCollectionAgentAddress> optionalPaymentCollectionAgentAddress = paymentCollectionAgentAddressValidator.validate(requestDto.getId());


@Autowired
private PaymentCollectionAgentContactValidator paymentCollectionAgentContactValidator;
Optional<PaymentCollectionAgentContact> optionalPaymentCollectionAgentContact = paymentCollectionAgentContactValidator.validate(requestDto.getId());


@Autowired
private PaymentCollectionAgentDocumentValidator paymentCollectionAgentDocumentValidator;
Optional<PaymentCollectionAgentDocument> optionalPaymentCollectionAgentDocument = paymentCollectionAgentDocumentValidator.validate(requestDto.getId());


@Autowired
private PaymentCollectionAgentOfflinePaymentValidator paymentCollectionAgentOfflinePaymentValidator;
Optional<PaymentCollectionAgentOfflinePayment> optionalPaymentCollectionAgentOfflinePayment = paymentCollectionAgentOfflinePaymentValidator.validate(requestDto.getId());


@Autowired
private PaymentCollectionAgentOfflinePaymentTxnValidator paymentCollectionAgentOfflinePaymentTxnValidator;
Optional<PaymentCollectionAgentOfflinePaymentTxn> optionalPaymentCollectionAgentOfflinePaymentTxn = paymentCollectionAgentOfflinePaymentTxnValidator.validate(requestDto.getId());


@Autowired
private PaymentCollectionAgentStatusHistoryValidator paymentCollectionAgentStatusHistoryValidator;
Optional<PaymentCollectionAgentStatusHistory> optionalPaymentCollectionAgentStatusHistory = paymentCollectionAgentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private PaymentCollectionAgentUserValidator paymentCollectionAgentUserValidator;
Optional<PaymentCollectionAgentUser> optionalPaymentCollectionAgentUser = paymentCollectionAgentUserValidator.validate(requestDto.getId());


@Autowired
private PaymentDisbursementValidator paymentDisbursementValidator;
Optional<PaymentDisbursement> optionalPaymentDisbursement = paymentDisbursementValidator.validate(requestDto.getId());


@Autowired
private PaymentDisbursementStatusHistoryValidator paymentDisbursementStatusHistoryValidator;
Optional<PaymentDisbursementStatusHistory> optionalPaymentDisbursementStatusHistory = paymentDisbursementStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private PaymentIssuedValidator paymentIssuedValidator;
Optional<PaymentIssued> optionalPaymentIssued = paymentIssuedValidator.validate(requestDto.getId());


@Autowired
private PaymentReceiptValidator paymentReceiptValidator;
Optional<PaymentReceipt> optionalPaymentReceipt = paymentReceiptValidator.validate(requestDto.getId());


@Autowired
private PaymentReceiptAddressValidator paymentReceiptAddressValidator;
Optional<PaymentReceiptAddress> optionalPaymentReceiptAddress = paymentReceiptAddressValidator.validate(requestDto.getId());


@Autowired
private PaymentReceiptContactInfoValidator paymentReceiptContactInfoValidator;
Optional<PaymentReceiptContactInfo> optionalPaymentReceiptContactInfo = paymentReceiptContactInfoValidator.validate(requestDto.getId());


@Autowired
private PaymentReceiptPrintHistoryValidator paymentReceiptPrintHistoryValidator;
Optional<PaymentReceiptPrintHistory> optionalPaymentReceiptPrintHistory = paymentReceiptPrintHistoryValidator.validate(requestDto.getId());


@Autowired
private PaymentReceivedValidator paymentReceivedValidator;
Optional<PaymentReceived> optionalPaymentReceived = paymentReceivedValidator.validate(requestDto.getId());


@Autowired
private PaymentReceivedCollectionValidator paymentReceivedCollectionValidator;
Optional<PaymentReceivedCollection> optionalPaymentReceivedCollection = paymentReceivedCollectionValidator.validate(requestDto.getId());


@Autowired
private PaymentReceivedStatusHistoryValidator paymentReceivedStatusHistoryValidator;
Optional<PaymentReceivedStatusHistory> optionalPaymentReceivedStatusHistory = paymentReceivedStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private PaymentReceivedTypeValidator paymentReceivedTypeValidator;
Optional<PaymentReceivedType> optionalPaymentReceivedType = paymentReceivedTypeValidator.validate(requestDto.getId());


@Autowired
private PaymentReceivedTypeStatusHistoryValidator paymentReceivedTypeStatusHistoryValidator;
Optional<PaymentReceivedTypeStatusHistory> optionalPaymentReceivedTypeStatusHistory = paymentReceivedTypeStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private PaymentReferenceNoValidator paymentReferenceNoValidator;
Optional<PaymentReferenceNo> optionalPaymentReferenceNo = paymentReferenceNoValidator.validate(requestDto.getId());


@Autowired
private PaymentRefundRequestBankDetailValidator paymentRefundRequestBankDetailValidator;
Optional<PaymentRefundRequestBankDetail> optionalPaymentRefundRequestBankDetail = paymentRefundRequestBankDetailValidator.validate(requestDto.getId());


@Autowired
private PersonValidator personValidator;
Optional<Person> optionalPerson = personValidator.validate(requestDto.getId());


@Autowired
private PersonAddressValidator personAddressValidator;
Optional<PersonAddress> optionalPersonAddress = personAddressValidator.validate(requestDto.getId());


@Autowired
private PersonAddressHistoryValidator personAddressHistoryValidator;
Optional<PersonAddressHistory> optionalPersonAddressHistory = personAddressHistoryValidator.validate(requestDto.getId());


@Autowired
private PersonAddressReferenceValidator personAddressReferenceValidator;
Optional<PersonAddressReference> optionalPersonAddressReference = personAddressReferenceValidator.validate(requestDto.getId());


@Autowired
private PersonContactValidator personContactValidator;
Optional<PersonContact> optionalPersonContact = personContactValidator.validate(requestDto.getId());


@Autowired
private PersonContactHistoryValidator personContactHistoryValidator;
Optional<PersonContactHistory> optionalPersonContactHistory = personContactHistoryValidator.validate(requestDto.getId());


@Autowired
private PersonContactReferenceValidator personContactReferenceValidator;
Optional<PersonContactReference> optionalPersonContactReference = personContactReferenceValidator.validate(requestDto.getId());


@Autowired
private PersonDocumentValidator personDocumentValidator;
Optional<PersonDocument> optionalPersonDocument = personDocumentValidator.validate(requestDto.getId());


@Autowired
private PersonGeneralValidator personGeneralValidator;
Optional<PersonGeneral> optionalPersonGeneral = personGeneralValidator.validate(requestDto.getId());


@Autowired
private PersonGeneralAddressValidator personGeneralAddressValidator;
Optional<PersonGeneralAddress> optionalPersonGeneralAddress = personGeneralAddressValidator.validate(requestDto.getId());


@Autowired
private PersonGeneralAddressReferenceValidator personGeneralAddressReferenceValidator;
Optional<PersonGeneralAddressReference> optionalPersonGeneralAddressReference = personGeneralAddressReferenceValidator.validate(requestDto.getId());


@Autowired
private PersonGeneralContactValidator personGeneralContactValidator;
Optional<PersonGeneralContact> optionalPersonGeneralContact = personGeneralContactValidator.validate(requestDto.getId());


@Autowired
private PersonGeneralContactReferenceValidator personGeneralContactReferenceValidator;
Optional<PersonGeneralContactReference> optionalPersonGeneralContactReference = personGeneralContactReferenceValidator.validate(requestDto.getId());


@Autowired
private PersonGeneralNicValidator personGeneralNicValidator;
Optional<PersonGeneralNic> optionalPersonGeneralNic = personGeneralNicValidator.validate(requestDto.getId());


@Autowired
private PersonGeneralPassportValidator personGeneralPassportValidator;
Optional<PersonGeneralPassport> optionalPersonGeneralPassport = personGeneralPassportValidator.validate(requestDto.getId());


@Autowired
private PersonHistoryValidator personHistoryValidator;
Optional<PersonHistory> optionalPersonHistory = personHistoryValidator.validate(requestDto.getId());


@Autowired
private PersonIdentityNicValidator personIdentityNicValidator;
Optional<PersonIdentityNic> optionalPersonIdentityNic = personIdentityNicValidator.validate(requestDto.getId());


@Autowired
private PersonIdentityNicHistoryValidator personIdentityNicHistoryValidator;
Optional<PersonIdentityNicHistory> optionalPersonIdentityNicHistory = personIdentityNicHistoryValidator.validate(requestDto.getId());


@Autowired
private PersonIdentityPassportValidator personIdentityPassportValidator;
Optional<PersonIdentityPassport> optionalPersonIdentityPassport = personIdentityPassportValidator.validate(requestDto.getId());


@Autowired
private PersonIdentityPassportHistoryValidator personIdentityPassportHistoryValidator;
Optional<PersonIdentityPassportHistory> optionalPersonIdentityPassportHistory = personIdentityPassportHistoryValidator.validate(requestDto.getId());


@Autowired
private PersonMergeValidator personMergeValidator;
Optional<PersonMerge> optionalPersonMerge = personMergeValidator.validate(requestDto.getId());


@Autowired
private PersonMergeChildValidator personMergeChildValidator;
Optional<PersonMergeChild> optionalPersonMergeChild = personMergeChildValidator.validate(requestDto.getId());


@Autowired
private PersonMergeChildReferenceValidator personMergeChildReferenceValidator;
Optional<PersonMergeChildReference> optionalPersonMergeChildReference = personMergeChildReferenceValidator.validate(requestDto.getId());


@Autowired
private PersonMessageValidator personMessageValidator;
Optional<PersonMessage> optionalPersonMessage = personMessageValidator.validate(requestDto.getId());


@Autowired
private PersonNotificationValidator personNotificationValidator;
Optional<PersonNotification> optionalPersonNotification = personNotificationValidator.validate(requestDto.getId());


@Autowired
private PersonProfilePictureHistoryValidator personProfilePictureHistoryValidator;
Optional<PersonProfilePictureHistory> optionalPersonProfilePictureHistory = personProfilePictureHistoryValidator.validate(requestDto.getId());


@Autowired
private PersonRequestAddressAddupdateValidator personRequestAddressAddupdateValidator;
Optional<PersonRequestAddressAddupdate> optionalPersonRequestAddressAddupdate = personRequestAddressAddupdateValidator.validate(requestDto.getId());


@Autowired
private PersonRequestContactAddupdateValidator personRequestContactAddupdateValidator;
Optional<PersonRequestContactAddupdate> optionalPersonRequestContactAddupdate = personRequestContactAddupdateValidator.validate(requestDto.getId());


@Autowired
private PersonRequestNicAddupdateValidator personRequestNicAddupdateValidator;
Optional<PersonRequestNicAddupdate> optionalPersonRequestNicAddupdate = personRequestNicAddupdateValidator.validate(requestDto.getId());


@Autowired
private PersonRequestPassportAddupdateValidator personRequestPassportAddupdateValidator;
Optional<PersonRequestPassportAddupdate> optionalPersonRequestPassportAddupdate = personRequestPassportAddupdateValidator.validate(requestDto.getId());


@Autowired
private PersonRequestServiceCounterDmuValidator personRequestServiceCounterDmuValidator;
Optional<PersonRequestServiceCounterDmu> optionalPersonRequestServiceCounterDmu = personRequestServiceCounterDmuValidator.validate(requestDto.getId());


@Autowired
private PersonRequestUpdateValidator personRequestUpdateValidator;
Optional<PersonRequestUpdate> optionalPersonRequestUpdate = personRequestUpdateValidator.validate(requestDto.getId());


@Autowired
private PersonStatusHistoryValidator personStatusHistoryValidator;
Optional<PersonStatusHistory> optionalPersonStatusHistory = personStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private PersonUnmergeValidator personUnmergeValidator;
Optional<PersonUnmerge> optionalPersonUnmerge = personUnmergeValidator.validate(requestDto.getId());


@Autowired
private PersonUnmergeChildValidator personUnmergeChildValidator;
Optional<PersonUnmergeChild> optionalPersonUnmergeChild = personUnmergeChildValidator.validate(requestDto.getId());


@Autowired
private PostOfficeBatchDepositValidator postOfficeBatchDepositValidator;
Optional<PostOfficeBatchDeposit> optionalPostOfficeBatchDeposit = postOfficeBatchDepositValidator.validate(requestDto.getId());


@Autowired
private PostOfficeBatchDepositAllocationValidator postOfficeBatchDepositAllocationValidator;
Optional<PostOfficeBatchDepositAllocation> optionalPostOfficeBatchDepositAllocation = postOfficeBatchDepositAllocationValidator.validate(requestDto.getId());


@Autowired
private PostOfficeBatchDepositEtfbBranchValidator postOfficeBatchDepositEtfbBranchValidator;
Optional<PostOfficeBatchDepositEtfbBranch> optionalPostOfficeBatchDepositEtfbBranch = postOfficeBatchDepositEtfbBranchValidator.validate(requestDto.getId());


@Autowired
private PostOfficeBatchDepositPaymentTypeHistoryValidator postOfficeBatchDepositPaymentTypeHistoryValidator;
Optional<PostOfficeBatchDepositPaymentTypeHistory> optionalPostOfficeBatchDepositPaymentTypeHistory = postOfficeBatchDepositPaymentTypeHistoryValidator.validate(requestDto.getId());


@Autowired
private PostOfficeBatchDepositReconciliationValidator postOfficeBatchDepositReconciliationValidator;
Optional<PostOfficeBatchDepositReconciliation> optionalPostOfficeBatchDepositReconciliation = postOfficeBatchDepositReconciliationValidator.validate(requestDto.getId());


@Autowired
private PostOfficeBatchDepositStatusHistoryValidator postOfficeBatchDepositStatusHistoryValidator;
Optional<PostOfficeBatchDepositStatusHistory> optionalPostOfficeBatchDepositStatusHistory = postOfficeBatchDepositStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentValidator selfEmploymentValidator;
Optional<SelfEmployment> optionalSelfEmployment = selfEmploymentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentValidator selfEmploymentAgentValidator;
Optional<SelfEmploymentAgent> optionalSelfEmploymentAgent = selfEmploymentAgentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentAddressValidator selfEmploymentAgentAddressValidator;
Optional<SelfEmploymentAgentAddress> optionalSelfEmploymentAgentAddress = selfEmploymentAgentAddressValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentAvailableBalanceValidator selfEmploymentAgentAvailableBalanceValidator;
Optional<SelfEmploymentAgentAvailableBalance> optionalSelfEmploymentAgentAvailableBalance = selfEmploymentAgentAvailableBalanceValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentCategoryValidator selfEmploymentAgentCategoryValidator;
Optional<SelfEmploymentAgentCategory> optionalSelfEmploymentAgentCategory = selfEmploymentAgentCategoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentContactValidator selfEmploymentAgentContactValidator;
Optional<SelfEmploymentAgentContact> optionalSelfEmploymentAgentContact = selfEmploymentAgentContactValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentContactPersonValidator selfEmploymentAgentContactPersonValidator;
Optional<SelfEmploymentAgentContactPerson> optionalSelfEmploymentAgentContactPerson = selfEmploymentAgentContactPersonValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentDocumentValidator selfEmploymentAgentDocumentValidator;
Optional<SelfEmploymentAgentDocument> optionalSelfEmploymentAgentDocument = selfEmploymentAgentDocumentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentDocumentSystemValidator selfEmploymentAgentDocumentSystemValidator;
Optional<SelfEmploymentAgentDocumentSystem> optionalSelfEmploymentAgentDocumentSystem = selfEmploymentAgentDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentDocumentSystemPrintValidator selfEmploymentAgentDocumentSystemPrintValidator;
Optional<SelfEmploymentAgentDocumentSystemPrint> optionalSelfEmploymentAgentDocumentSystemPrint = selfEmploymentAgentDocumentSystemPrintValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentHistoryValidator selfEmploymentAgentHistoryValidator;
Optional<SelfEmploymentAgentHistory> optionalSelfEmploymentAgentHistory = selfEmploymentAgentHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentInterimValidator selfEmploymentAgentInterimValidator;
Optional<SelfEmploymentAgentInterim> optionalSelfEmploymentAgentInterim = selfEmploymentAgentInterimValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentInterimAddressValidator selfEmploymentAgentInterimAddressValidator;
Optional<SelfEmploymentAgentInterimAddress> optionalSelfEmploymentAgentInterimAddress = selfEmploymentAgentInterimAddressValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentInterimCategoryValidator selfEmploymentAgentInterimCategoryValidator;
Optional<SelfEmploymentAgentInterimCategory> optionalSelfEmploymentAgentInterimCategory = selfEmploymentAgentInterimCategoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentInterimContactValidator selfEmploymentAgentInterimContactValidator;
Optional<SelfEmploymentAgentInterimContact> optionalSelfEmploymentAgentInterimContact = selfEmploymentAgentInterimContactValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentInterimUserValidator selfEmploymentAgentInterimUserValidator;
Optional<SelfEmploymentAgentInterimUser> optionalSelfEmploymentAgentInterimUser = selfEmploymentAgentInterimUserValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentMemberValidator selfEmploymentAgentMemberValidator;
Optional<SelfEmploymentAgentMember> optionalSelfEmploymentAgentMember = selfEmploymentAgentMemberValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentMemberStatusHistoryValidator selfEmploymentAgentMemberStatusHistoryValidator;
Optional<SelfEmploymentAgentMemberStatusHistory> optionalSelfEmploymentAgentMemberStatusHistory = selfEmploymentAgentMemberStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentPaymentValidator selfEmploymentAgentPaymentValidator;
Optional<SelfEmploymentAgentPayment> optionalSelfEmploymentAgentPayment = selfEmploymentAgentPaymentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentPaymentCollectionValidator selfEmploymentAgentPaymentCollectionValidator;
Optional<SelfEmploymentAgentPaymentCollection> optionalSelfEmploymentAgentPaymentCollection = selfEmploymentAgentPaymentCollectionValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentPaymentDocumentValidator selfEmploymentAgentPaymentDocumentValidator;
Optional<SelfEmploymentAgentPaymentDocument> optionalSelfEmploymentAgentPaymentDocument = selfEmploymentAgentPaymentDocumentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentPaymentStatusHistoryValidator selfEmploymentAgentPaymentStatusHistoryValidator;
Optional<SelfEmploymentAgentPaymentStatusHistory> optionalSelfEmploymentAgentPaymentStatusHistory = selfEmploymentAgentPaymentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentRequestAddressAddupdateValidator selfEmploymentAgentRequestAddressAddupdateValidator;
Optional<SelfEmploymentAgentRequestAddressAddupdate> optionalSelfEmploymentAgentRequestAddressAddupdate = selfEmploymentAgentRequestAddressAddupdateValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentRequestContactAddupdateValidator selfEmploymentAgentRequestContactAddupdateValidator;
Optional<SelfEmploymentAgentRequestContactAddupdate> optionalSelfEmploymentAgentRequestContactAddupdate = selfEmploymentAgentRequestContactAddupdateValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentRequestServiceCounterDmuValidator selfEmploymentAgentRequestServiceCounterDmuValidator;
Optional<SelfEmploymentAgentRequestServiceCounterDmu> optionalSelfEmploymentAgentRequestServiceCounterDmu = selfEmploymentAgentRequestServiceCounterDmuValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentStatusHistoryValidator selfEmploymentAgentStatusHistoryValidator;
Optional<SelfEmploymentAgentStatusHistory> optionalSelfEmploymentAgentStatusHistory = selfEmploymentAgentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentUpdateValidator selfEmploymentAgentUpdateValidator;
Optional<SelfEmploymentAgentUpdate> optionalSelfEmploymentAgentUpdate = selfEmploymentAgentUpdateValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentUserValidator selfEmploymentAgentUserValidator;
Optional<SelfEmploymentAgentUser> optionalSelfEmploymentAgentUser = selfEmploymentAgentUserValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAgentUserHistoryValidator selfEmploymentAgentUserHistoryValidator;
Optional<SelfEmploymentAgentUserHistory> optionalSelfEmploymentAgentUserHistory = selfEmploymentAgentUserHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentAvailableBalanceValidator selfEmploymentAvailableBalanceValidator;
Optional<SelfEmploymentAvailableBalance> optionalSelfEmploymentAvailableBalance = selfEmploymentAvailableBalanceValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentDocumentValidator selfEmploymentDocumentValidator;
Optional<SelfEmploymentDocument> optionalSelfEmploymentDocument = selfEmploymentDocumentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentDocumentSystemValidator selfEmploymentDocumentSystemValidator;
Optional<SelfEmploymentDocumentSystem> optionalSelfEmploymentDocumentSystem = selfEmploymentDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentDocumentSystemPrintValidator selfEmploymentDocumentSystemPrintValidator;
Optional<SelfEmploymentDocumentSystemPrint> optionalSelfEmploymentDocumentSystemPrint = selfEmploymentDocumentSystemPrintValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentHistoryValidator selfEmploymentHistoryValidator;
Optional<SelfEmploymentHistory> optionalSelfEmploymentHistory = selfEmploymentHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentInterimValidator selfEmploymentInterimValidator;
Optional<SelfEmploymentInterim> optionalSelfEmploymentInterim = selfEmploymentInterimValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentPaymentValidator selfEmploymentPaymentValidator;
Optional<SelfEmploymentPayment> optionalSelfEmploymentPayment = selfEmploymentPaymentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentPaymentCollectionValidator selfEmploymentPaymentCollectionValidator;
Optional<SelfEmploymentPaymentCollection> optionalSelfEmploymentPaymentCollection = selfEmploymentPaymentCollectionValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentPaymentDocumentValidator selfEmploymentPaymentDocumentValidator;
Optional<SelfEmploymentPaymentDocument> optionalSelfEmploymentPaymentDocument = selfEmploymentPaymentDocumentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentPaymentStatusHistoryValidator selfEmploymentPaymentStatusHistoryValidator;
Optional<SelfEmploymentPaymentStatusHistory> optionalSelfEmploymentPaymentStatusHistory = selfEmploymentPaymentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentPreRegistraionValidator selfEmploymentPreRegistraionValidator;
Optional<SelfEmploymentPreRegistraion> optionalSelfEmploymentPreRegistraion = selfEmploymentPreRegistraionValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentPreRegistraionDocumentValidator selfEmploymentPreRegistraionDocumentValidator;
Optional<SelfEmploymentPreRegistraionDocument> optionalSelfEmploymentPreRegistraionDocument = selfEmploymentPreRegistraionDocumentValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentPreRegistraionNomineeValidator selfEmploymentPreRegistraionNomineeValidator;
Optional<SelfEmploymentPreRegistraionNominee> optionalSelfEmploymentPreRegistraionNominee = selfEmploymentPreRegistraionNomineeValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentPreRegistraionStatusHistoryValidator selfEmploymentPreRegistraionStatusHistoryValidator;
Optional<SelfEmploymentPreRegistraionStatusHistory> optionalSelfEmploymentPreRegistraionStatusHistory = selfEmploymentPreRegistraionStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentRequestNomineeValidator selfEmploymentRequestNomineeValidator;
Optional<SelfEmploymentRequestNominee> optionalSelfEmploymentRequestNominee = selfEmploymentRequestNomineeValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentRequestNomineeAddressValidator selfEmploymentRequestNomineeAddressValidator;
Optional<SelfEmploymentRequestNomineeAddress> optionalSelfEmploymentRequestNomineeAddress = selfEmploymentRequestNomineeAddressValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentRequestNomineeContactValidator selfEmploymentRequestNomineeContactValidator;
Optional<SelfEmploymentRequestNomineeContact> optionalSelfEmploymentRequestNomineeContact = selfEmploymentRequestNomineeContactValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentRequestServiceCounterDmuValidator selfEmploymentRequestServiceCounterDmuValidator;
Optional<SelfEmploymentRequestServiceCounterDmu> optionalSelfEmploymentRequestServiceCounterDmu = selfEmploymentRequestServiceCounterDmuValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentRequestUpdateValidator selfEmploymentRequestUpdateValidator;
Optional<SelfEmploymentRequestUpdate> optionalSelfEmploymentRequestUpdate = selfEmploymentRequestUpdateValidator.validate(requestDto.getId());


@Autowired
private SelfEmploymentStatusHistoryValidator selfEmploymentStatusHistoryValidator;
Optional<SelfEmploymentStatusHistory> optionalSelfEmploymentStatusHistory = selfEmploymentStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterValidator serviceCounterValidator;
Optional<ServiceCounter> optionalServiceCounter = serviceCounterValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterContactValidator serviceCounterContactValidator;
Optional<ServiceCounterContact> optionalServiceCounterContact = serviceCounterContactValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterDocumentValidator serviceCounterDocumentValidator;
Optional<ServiceCounterDocument> optionalServiceCounterDocument = serviceCounterDocumentValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterPreviousVisitValidator serviceCounterPreviousVisitValidator;
Optional<ServiceCounterPreviousVisit> optionalServiceCounterPreviousVisit = serviceCounterPreviousVisitValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterRequirementTypeValidator serviceCounterRequirementTypeValidator;
Optional<ServiceCounterRequirementType> optionalServiceCounterRequirementType = serviceCounterRequirementTypeValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterRequirementTypeDocumentValidator serviceCounterRequirementTypeDocumentValidator;
Optional<ServiceCounterRequirementTypeDocument> optionalServiceCounterRequirementTypeDocument = serviceCounterRequirementTypeDocumentValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterRequirementTypeEmployerValidator serviceCounterRequirementTypeEmployerValidator;
Optional<ServiceCounterRequirementTypeEmployer> optionalServiceCounterRequirementTypeEmployer = serviceCounterRequirementTypeEmployerValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterRequirementTypeResolutionActionValidator serviceCounterRequirementTypeResolutionActionValidator;
Optional<ServiceCounterRequirementTypeResolutionAction> optionalServiceCounterRequirementTypeResolutionAction = serviceCounterRequirementTypeResolutionActionValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterRequirementTypeSbuValidator serviceCounterRequirementTypeSbuValidator;
Optional<ServiceCounterRequirementTypeSbu> optionalServiceCounterRequirementTypeSbu = serviceCounterRequirementTypeSbuValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterRequirementTypeSelfEmploymentValidator serviceCounterRequirementTypeSelfEmploymentValidator;
Optional<ServiceCounterRequirementTypeSelfEmployment> optionalServiceCounterRequirementTypeSelfEmployment = serviceCounterRequirementTypeSelfEmploymentValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterRequirementTypeSelfEmploymentAgentValidator serviceCounterRequirementTypeSelfEmploymentAgentValidator;
Optional<ServiceCounterRequirementTypeSelfEmploymentAgent> optionalServiceCounterRequirementTypeSelfEmploymentAgent = serviceCounterRequirementTypeSelfEmploymentAgentValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterResolutionReferenceTableValidator serviceCounterResolutionReferenceTableValidator;
Optional<ServiceCounterResolutionReferenceTable> optionalServiceCounterResolutionReferenceTable = serviceCounterResolutionReferenceTableValidator.validate(requestDto.getId());


@Autowired
private ServiceCounterStatusHistoryValidator serviceCounterStatusHistoryValidator;
Optional<ServiceCounterStatusHistory> optionalServiceCounterStatusHistory = serviceCounterStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestValidator serviceRequestValidator;
Optional<ServiceRequest> optionalServiceRequest = serviceRequestValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestCollectionAmendmentValidator serviceRequestCollectionAmendmentValidator;
Optional<ServiceRequestCollectionAmendment> optionalServiceRequestCollectionAmendment = serviceRequestCollectionAmendmentValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestCollectionAmendmentRejectValidator serviceRequestCollectionAmendmentRejectValidator;
Optional<ServiceRequestCollectionAmendmentReject> optionalServiceRequestCollectionAmendmentReject = serviceRequestCollectionAmendmentRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestCollectionAmendmentRequestValidator serviceRequestCollectionAmendmentRequestValidator;
Optional<ServiceRequestCollectionAmendmentRequest> optionalServiceRequestCollectionAmendmentRequest = serviceRequestCollectionAmendmentRequestValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestCollectionAmendmentResolutionHistoryValidator serviceRequestCollectionAmendmentResolutionHistoryValidator;
Optional<ServiceRequestCollectionAmendmentResolutionHistory> optionalServiceRequestCollectionAmendmentResolutionHistory = serviceRequestCollectionAmendmentResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestCollectionErrorValidator serviceRequestCollectionErrorValidator;
Optional<ServiceRequestCollectionError> optionalServiceRequestCollectionError = serviceRequestCollectionErrorValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestCollectionErrorRejectValidator serviceRequestCollectionErrorRejectValidator;
Optional<ServiceRequestCollectionErrorReject> optionalServiceRequestCollectionErrorReject = serviceRequestCollectionErrorRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestCollectionErrorResolutionHistoryValidator serviceRequestCollectionErrorResolutionHistoryValidator;
Optional<ServiceRequestCollectionErrorResolutionHistory> optionalServiceRequestCollectionErrorResolutionHistory = serviceRequestCollectionErrorResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestDescendantValidator serviceRequestDescendantValidator;
Optional<ServiceRequestDescendant> optionalServiceRequestDescendant = serviceRequestDescendantValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestDocumentValidator serviceRequestDocumentValidator;
Optional<ServiceRequestDocument> optionalServiceRequestDocument = serviceRequestDocumentValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestDocumentSystemValidator serviceRequestDocumentSystemValidator;
Optional<ServiceRequestDocumentSystem> optionalServiceRequestDocumentSystem = serviceRequestDocumentSystemValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestDocumentSystemPrintValidator serviceRequestDocumentSystemPrintValidator;
Optional<ServiceRequestDocumentSystemPrint> optionalServiceRequestDocumentSystemPrint = serviceRequestDocumentSystemPrintValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestEmployerUpdateValidator serviceRequestEmployerUpdateValidator;
Optional<ServiceRequestEmployerUpdate> optionalServiceRequestEmployerUpdate = serviceRequestEmployerUpdateValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestEmployerUpdateRejectValidator serviceRequestEmployerUpdateRejectValidator;
Optional<ServiceRequestEmployerUpdateReject> optionalServiceRequestEmployerUpdateReject = serviceRequestEmployerUpdateRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestEmployerUpdateResolutionHistoryValidator serviceRequestEmployerUpdateResolutionHistoryValidator;
Optional<ServiceRequestEmployerUpdateResolutionHistory> optionalServiceRequestEmployerUpdateResolutionHistory = serviceRequestEmployerUpdateResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestEnforcementValidator serviceRequestEnforcementValidator;
Optional<ServiceRequestEnforcement> optionalServiceRequestEnforcement = serviceRequestEnforcementValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestEnforcementRejectValidator serviceRequestEnforcementRejectValidator;
Optional<ServiceRequestEnforcementReject> optionalServiceRequestEnforcementReject = serviceRequestEnforcementRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestEnforcementResolutionHistoryValidator serviceRequestEnforcementResolutionHistoryValidator;
Optional<ServiceRequestEnforcementResolutionHistory> optionalServiceRequestEnforcementResolutionHistory = serviceRequestEnforcementResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestFollowupDefaulterValidator serviceRequestFollowupDefaulterValidator;
Optional<ServiceRequestFollowupDefaulter> optionalServiceRequestFollowupDefaulter = serviceRequestFollowupDefaulterValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestFollowupDefaulterRejectValidator serviceRequestFollowupDefaulterRejectValidator;
Optional<ServiceRequestFollowupDefaulterReject> optionalServiceRequestFollowupDefaulterReject = serviceRequestFollowupDefaulterRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestFraudulentInvestigationValidator serviceRequestFraudulentInvestigationValidator;
Optional<ServiceRequestFraudulentInvestigation> optionalServiceRequestFraudulentInvestigation = serviceRequestFraudulentInvestigationValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestFraudulentInvestigationResolutionHistoryValidator serviceRequestFraudulentInvestigationResolutionHistoryValidator;
Optional<ServiceRequestFraudulentInvestigationResolutionHistory> optionalServiceRequestFraudulentInvestigationResolutionHistory = serviceRequestFraudulentInvestigationResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestFraudulentTransferredReferenceValidator serviceRequestFraudulentTransferredReferenceValidator;
Optional<ServiceRequestFraudulentTransferredReference> optionalServiceRequestFraudulentTransferredReference = serviceRequestFraudulentTransferredReferenceValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestHoldHistoryValidator serviceRequestHoldHistoryValidator;
Optional<ServiceRequestHoldHistory> optionalServiceRequestHoldHistory = serviceRequestHoldHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestNewEmploymentValidator serviceRequestNewEmploymentValidator;
Optional<ServiceRequestNewEmployment> optionalServiceRequestNewEmployment = serviceRequestNewEmploymentValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestNewEmploymentRejectValidator serviceRequestNewEmploymentRejectValidator;
Optional<ServiceRequestNewEmploymentReject> optionalServiceRequestNewEmploymentReject = serviceRequestNewEmploymentRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestNewEmploymentResolutionHistoryValidator serviceRequestNewEmploymentResolutionHistoryValidator;
Optional<ServiceRequestNewEmploymentResolutionHistory> optionalServiceRequestNewEmploymentResolutionHistory = serviceRequestNewEmploymentResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestStatusHistoryValidator serviceRequestStatusHistoryValidator;
Optional<ServiceRequestStatusHistory> optionalServiceRequestStatusHistory = serviceRequestStatusHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateEmploymentValidator serviceRequestUpdateEmploymentValidator;
Optional<ServiceRequestUpdateEmployment> optionalServiceRequestUpdateEmployment = serviceRequestUpdateEmploymentValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateEmploymentRejectValidator serviceRequestUpdateEmploymentRejectValidator;
Optional<ServiceRequestUpdateEmploymentReject> optionalServiceRequestUpdateEmploymentReject = serviceRequestUpdateEmploymentRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateEmploymentResolutionHistoryValidator serviceRequestUpdateEmploymentResolutionHistoryValidator;
Optional<ServiceRequestUpdateEmploymentResolutionHistory> optionalServiceRequestUpdateEmploymentResolutionHistory = serviceRequestUpdateEmploymentResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdatePersonMasterDataValidator serviceRequestUpdatePersonMasterDataValidator;
Optional<ServiceRequestUpdatePersonMasterData> optionalServiceRequestUpdatePersonMasterData = serviceRequestUpdatePersonMasterDataValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdatePersonMasterDataRejectValidator serviceRequestUpdatePersonMasterDataRejectValidator;
Optional<ServiceRequestUpdatePersonMasterDataReject> optionalServiceRequestUpdatePersonMasterDataReject = serviceRequestUpdatePersonMasterDataRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdatePersonMasterDataResolutionHistoryValidator serviceRequestUpdatePersonMasterDataResolutionHistoryValidator;
Optional<ServiceRequestUpdatePersonMasterDataResolutionHistory> optionalServiceRequestUpdatePersonMasterDataResolutionHistory = serviceRequestUpdatePersonMasterDataResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateSelfEmploymentValidator serviceRequestUpdateSelfEmploymentValidator;
Optional<ServiceRequestUpdateSelfEmployment> optionalServiceRequestUpdateSelfEmployment = serviceRequestUpdateSelfEmploymentValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateSelfEmploymentAgentValidator serviceRequestUpdateSelfEmploymentAgentValidator;
Optional<ServiceRequestUpdateSelfEmploymentAgent> optionalServiceRequestUpdateSelfEmploymentAgent = serviceRequestUpdateSelfEmploymentAgentValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateSelfEmploymentAgentRejectValidator serviceRequestUpdateSelfEmploymentAgentRejectValidator;
Optional<ServiceRequestUpdateSelfEmploymentAgentReject> optionalServiceRequestUpdateSelfEmploymentAgentReject = serviceRequestUpdateSelfEmploymentAgentRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateSelfEmploymentAgentResolutionHistoryValidator serviceRequestUpdateSelfEmploymentAgentResolutionHistoryValidator;
Optional<ServiceRequestUpdateSelfEmploymentAgentResolutionHistory> optionalServiceRequestUpdateSelfEmploymentAgentResolutionHistory = serviceRequestUpdateSelfEmploymentAgentResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateSelfEmploymentRejectValidator serviceRequestUpdateSelfEmploymentRejectValidator;
Optional<ServiceRequestUpdateSelfEmploymentReject> optionalServiceRequestUpdateSelfEmploymentReject = serviceRequestUpdateSelfEmploymentRejectValidator.validate(requestDto.getId());


@Autowired
private ServiceRequestUpdateSelfEmploymentResolutionHistoryValidator serviceRequestUpdateSelfEmploymentResolutionHistoryValidator;
Optional<ServiceRequestUpdateSelfEmploymentResolutionHistory> optionalServiceRequestUpdateSelfEmploymentResolutionHistory = serviceRequestUpdateSelfEmploymentResolutionHistoryValidator.validate(requestDto.getId());


@Autowired
private SuspenseAccountValidator suspenseAccountValidator;
Optional<SuspenseAccount> optionalSuspenseAccount = suspenseAccountValidator.validate(requestDto.getId());


@Autowired
private SuspenseAccountCreditValidator suspenseAccountCreditValidator;
Optional<SuspenseAccountCredit> optionalSuspenseAccountCredit = suspenseAccountCreditValidator.validate(requestDto.getId());


@Autowired
private SuspenseAccountCreditCollectionErrorValidator suspenseAccountCreditCollectionErrorValidator;
Optional<SuspenseAccountCreditCollectionError> optionalSuspenseAccountCreditCollectionError = suspenseAccountCreditCollectionErrorValidator.validate(requestDto.getId());


@Autowired
private SuspenseAccountDebitValidator suspenseAccountDebitValidator;
Optional<SuspenseAccountDebit> optionalSuspenseAccountDebit = suspenseAccountDebitValidator.validate(requestDto.getId());


@Autowired
private SystemDocumentTypeUniqueValidator systemDocumentTypeUniqueValidator;
Optional<SystemDocumentTypeUnique> optionalSystemDocumentTypeUnique = systemDocumentTypeUniqueValidator.validate(requestDto.getId());


@Autowired
private TransactionValidator transactionValidator;
Optional<Transaction> optionalTransaction = transactionValidator.validate(requestDto.getId());


@Autowired
private TxnClaimValidator txnClaimValidator;
Optional<TxnClaim> optionalTxnClaim = txnClaimValidator.validate(requestDto.getId());


@Autowired
private TxnEmployerValidator txnEmployerValidator;
Optional<TxnEmployer> optionalTxnEmployer = txnEmployerValidator.validate(requestDto.getId());


@Autowired
private TxnEmployerSurchargeNoticeValidator txnEmployerSurchargeNoticeValidator;
Optional<TxnEmployerSurchargeNotice> optionalTxnEmployerSurchargeNotice = txnEmployerSurchargeNoticeValidator.validate(requestDto.getId());


@Autowired
private TxnEmployerValueValidator txnEmployerValueValidator;
Optional<TxnEmployerValue> optionalTxnEmployerValue = txnEmployerValueValidator.validate(requestDto.getId());


@Autowired
private TxnEnforcementDefaulterValidator txnEnforcementDefaulterValidator;
Optional<TxnEnforcementDefaulter> optionalTxnEnforcementDefaulter = txnEnforcementDefaulterValidator.validate(requestDto.getId());


@Autowired
private TxnEnforcementEmployerValidator txnEnforcementEmployerValidator;
Optional<TxnEnforcementEmployer> optionalTxnEnforcementEmployer = txnEnforcementEmployerValidator.validate(requestDto.getId());


@Autowired
private TxnFinanceValidator txnFinanceValidator;
Optional<TxnFinance> optionalTxnFinance = txnFinanceValidator.validate(requestDto.getId());


@Autowired
private TxnIntCalcAmicValidator txnIntCalcAmicValidator;
Optional<TxnIntCalcAmic> optionalTxnIntCalcAmic = txnIntCalcAmicValidator.validate(requestDto.getId());


@Autowired
private TxnIntCalcFmicValidator txnIntCalcFmicValidator;
Optional<TxnIntCalcFmic> optionalTxnIntCalcFmic = txnIntCalcFmicValidator.validate(requestDto.getId());


@Autowired
private TxnIntCalcRmicValidator txnIntCalcRmicValidator;
Optional<TxnIntCalcRmic> optionalTxnIntCalcRmic = txnIntCalcRmicValidator.validate(requestDto.getId());


@Autowired
private TxnLegalCaseValidator txnLegalCaseValidator;
Optional<TxnLegalCase> optionalTxnLegalCase = txnLegalCaseValidator.validate(requestDto.getId());


@Autowired
private TxnMemberValidator txnMemberValidator;
Optional<TxnMember> optionalTxnMember = txnMemberValidator.validate(requestDto.getId());


@Autowired
private TxnMemberValueValidator txnMemberValueValidator;
Optional<TxnMemberValue> optionalTxnMemberValue = txnMemberValueValidator.validate(requestDto.getId());


@Autowired
private TxnSelfEmploymentValidator txnSelfEmploymentValidator;
Optional<TxnSelfEmployment> optionalTxnSelfEmployment = txnSelfEmploymentValidator.validate(requestDto.getId());


@Autowired
private TxnSelfEmploymentAgentValidator txnSelfEmploymentAgentValidator;
Optional<TxnSelfEmploymentAgent> optionalTxnSelfEmploymentAgent = txnSelfEmploymentAgentValidator.validate(requestDto.getId());


@Autowired
private TxnServiceCounterValidator txnServiceCounterValidator;
Optional<TxnServiceCounter> optionalTxnServiceCounter = txnServiceCounterValidator.validate(requestDto.getId());


@Autowired
private UpdateEmploymentRequestNomineeValidator updateEmploymentRequestNomineeValidator;
Optional<UpdateEmploymentRequestNominee> optionalUpdateEmploymentRequestNominee = updateEmploymentRequestNomineeValidator.validate(requestDto.getId());


@Autowired
private UpdateEmploymentRequestNomineeAddressValidator updateEmploymentRequestNomineeAddressValidator;
Optional<UpdateEmploymentRequestNomineeAddress> optionalUpdateEmploymentRequestNomineeAddress = updateEmploymentRequestNomineeAddressValidator.validate(requestDto.getId());


@Autowired
private UpdateEmploymentRequestNomineeContactValidator updateEmploymentRequestNomineeContactValidator;
Optional<UpdateEmploymentRequestNomineeContact> optionalUpdateEmploymentRequestNomineeContact = updateEmploymentRequestNomineeContactValidator.validate(requestDto.getId());


@Autowired
private UserValidator userValidator;
Optional<User> optionalUser = userValidator.validate(requestDto.getId());


